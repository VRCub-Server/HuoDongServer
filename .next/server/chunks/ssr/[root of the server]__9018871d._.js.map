{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/default-data.ts"],"sourcesContent":["\n// src/lib/default-data.ts\nimport type { User, Event, Announcement } from './types';\n\nexport const defaultUsers: User[] = [\n    { id: 'Steve', username: 'Steve', avatarUrl: `https://placehold.co/100x100.png?text=St`, op: 0, password: '123456', qqNumber: '10001' },\n    { id: 'Alex', username: 'Alex', avatarUrl: `https://placehold.co/100x100.png?text=Al`, op: 0, password: '123456', qqNumber: '10002' },\n    { id: 'Notch', username: 'Notch', avatarUrl: `https://placehold.co/100x100.png?text=No`, op: 1, password: '123456', qqNumber: '10003' },\n    { id: 'dream_pep_id', username: 'dream_pep', avatarUrl: `https://placehold.co/100x100.png?text=dr`, op: 1, password: '123456', qqNumber: '12345678' }\n];\n\nexport const defaultEvents: Event[] = [\n    {\n        id: 'event1', name: '生存游戏锦标赛', date: '2024-07-29T12:00:00.000Z',\n        description: \"\\n### 欢迎参加年度生存游戏！\\n证明你的勇气，成为最后的幸存者。\\n**规则：**\\n- 禁止作弊\\n- 联盟是暂时的\\n- 玩得开心！\\n**奖品：**\\n- 第一名：钻石奖杯\\n- 第二名：金锭\\n- 第三名：铁制工具\\n\",\n        participantLimit: 24,\n        participants: [ // These will be used to seed event_participants\n             { id: 'Steve', username: 'Steve', avatarUrl: `https://placehold.co/100x100.png?text=St`, isCheckedIn: false, op: 0, password: '123456', qqNumber: '10001' },\n             { id: 'dream_pep_id', username: 'dream_pep', avatarUrl: `https://placehold.co/100x100.png?text=dr`, isCheckedIn: false, op: 1, password: '123456', qqNumber: '12345678' }\n        ],\n        cdKey: 'SURVIVAL2024', imageUrl: `https://placehold.co/800x400.png`, organizerId: 'Notch',\n    },\n    {\n        id: 'event2', name: '创意建筑大赛', date: '2024-07-22T12:00:00.000Z',\n        description: \"\\n## 展示你的建筑技巧！\\n主题：**中世纪城堡**\\n在时限内建造最令人印象深刻的城堡。\\n评分标准：\\n- 创意\\n- 细节\\n- 规模\\n\",\n        participantLimit: 50,\n        participants: [\n            { id: 'Steve', username: 'Steve', avatarUrl: `https://placehold.co/100x100.png?text=St`, isCheckedIn: true, op: 0, password: '123456', qqNumber: '10001' },\n            { id: 'Alex', username: 'Alex', avatarUrl: `https://placehold.co/100x100.png?text=Al`, isCheckedIn: false, op: 0, password: '123456', qqNumber: '10002' },\n        ],\n        cdKey: 'BUILDMC2024', imageUrl: `https://placehold.co/800x400.png`, organizerId: 'Notch',\n    },\n    {\n        id: 'event3', name: '跑酷挑战赛', date: '2024-07-08T12:00:00.000Z',\n        description: '在我们迄今为止最难的跑酷地图中测试你的敏捷性。完成即可获得奖励！',\n        participants: [ { id: 'dream_pep_id', username: 'dream_pep', avatarUrl: `https://placehold.co/100x100.png?text=dr`, isCheckedIn: true, op: 1, password: '123456', qqNumber: '12345678' } ],\n        cdKey: 'PARKOURX', imageUrl: `https://placehold.co/800x400.png`, organizerId: 'Notch',\n    },\n     {\n        id: 'event4', name: '红石装置展览会', date: '2024-08-21T12:00:00.000Z',\n        description: '展示你最巧妙的红石发明。创新是关键！', participantLimit: 10, participants: [],\n        cdKey: 'REDSTONEFAI', imageUrl: `https://placehold.co/800x400.png`, organizerId: 'Notch',\n    },\n    {\n        id: 'event_1747228478227_2n7f2', name: '测试活动', date: '2025-05-16T21:14',\n        description: '这是个测试活动将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通',\n        participantLimit: 50, cdKey: 'Beta1', imageUrl: '',\n        participants: [{id: 'dream_pep_id', username: 'dream_pep', avatarUrl: 'https://placehold.co/100x100.png?text=dr', isCheckedIn: false, op: 1, password: \"123456\", qqNumber: '12345678'}],\n        organizerId: 'dream_pep_id'\n    }\n];\n\nexport const defaultAnnouncements: Announcement[] = [\n  { id: 'announce1', title: '欢迎来到 VRCub 活动中心!', content: '发现、加入并创建精彩的《我的世界》活动。祝您玩得愉快！', date: new Date().toISOString() },\n  { id: 'announce2', title: '新功能：仪表盘公告', content: '现在您可以在仪表盘查阅最新公告了。', date: new Date(Date.now() - 86400000).toISOString() },\n];\n"],"names":[],"mappings":"AACA,0BAA0B;;;;;;AAGnB,MAAM,eAAuB;IAChC;QAAE,IAAI;QAAS,UAAU;QAAS,WAAW,CAAC,wCAAwC,CAAC;QAAE,IAAI;QAAG,UAAU;QAAU,UAAU;IAAQ;IACtI;QAAE,IAAI;QAAQ,UAAU;QAAQ,WAAW,CAAC,wCAAwC,CAAC;QAAE,IAAI;QAAG,UAAU;QAAU,UAAU;IAAQ;IACpI;QAAE,IAAI;QAAS,UAAU;QAAS,WAAW,CAAC,wCAAwC,CAAC;QAAE,IAAI;QAAG,UAAU;QAAU,UAAU;IAAQ;IACtI;QAAE,IAAI;QAAgB,UAAU;QAAa,WAAW,CAAC,wCAAwC,CAAC;QAAE,IAAI;QAAG,UAAU;QAAU,UAAU;IAAW;CACvJ;AAEM,MAAM,gBAAyB;IAClC;QACI,IAAI;QAAU,MAAM;QAAW,MAAM;QACrC,aAAa;QACb,kBAAkB;QAClB,cAAc;YACT;gBAAE,IAAI;gBAAS,UAAU;gBAAS,WAAW,CAAC,wCAAwC,CAAC;gBAAE,aAAa;gBAAO,IAAI;gBAAG,UAAU;gBAAU,UAAU;YAAQ;YAC1J;gBAAE,IAAI;gBAAgB,UAAU;gBAAa,WAAW,CAAC,wCAAwC,CAAC;gBAAE,aAAa;gBAAO,IAAI;gBAAG,UAAU;gBAAU,UAAU;YAAW;SAC5K;QACD,OAAO;QAAgB,UAAU,CAAC,gCAAgC,CAAC;QAAE,aAAa;IACtF;IACA;QACI,IAAI;QAAU,MAAM;QAAU,MAAM;QACpC,aAAa;QACb,kBAAkB;QAClB,cAAc;YACV;gBAAE,IAAI;gBAAS,UAAU;gBAAS,WAAW,CAAC,wCAAwC,CAAC;gBAAE,aAAa;gBAAM,IAAI;gBAAG,UAAU;gBAAU,UAAU;YAAQ;YACzJ;gBAAE,IAAI;gBAAQ,UAAU;gBAAQ,WAAW,CAAC,wCAAwC,CAAC;gBAAE,aAAa;gBAAO,IAAI;gBAAG,UAAU;gBAAU,UAAU;YAAQ;SAC3J;QACD,OAAO;QAAe,UAAU,CAAC,gCAAgC,CAAC;QAAE,aAAa;IACrF;IACA;QACI,IAAI;QAAU,MAAM;QAAS,MAAM;QACnC,aAAa;QACb,cAAc;YAAE;gBAAE,IAAI;gBAAgB,UAAU;gBAAa,WAAW,CAAC,wCAAwC,CAAC;gBAAE,aAAa;gBAAM,IAAI;gBAAG,UAAU;gBAAU,UAAU;YAAW;SAAG;QAC1L,OAAO;QAAY,UAAU,CAAC,gCAAgC,CAAC;QAAE,aAAa;IAClF;IACC;QACG,IAAI;QAAU,MAAM;QAAW,MAAM;QACrC,aAAa;QAAsB,kBAAkB;QAAI,cAAc,EAAE;QACzE,OAAO;QAAe,UAAU,CAAC,gCAAgC,CAAC;QAAE,aAAa;IACrF;IACA;QACI,IAAI;QAA6B,MAAM;QAAQ,MAAM;QACrD,aAAa;QACb,kBAAkB;QAAI,OAAO;QAAS,UAAU;QAChD,cAAc;YAAC;gBAAC,IAAI;gBAAgB,UAAU;gBAAa,WAAW;gBAA4C,aAAa;gBAAO,IAAI;gBAAG,UAAU;gBAAU,UAAU;YAAU;SAAE;QACvL,aAAa;IACjB;CACH;AAEM,MAAM,uBAAuC;IAClD;QAAE,IAAI;QAAa,OAAO;QAAoB,SAAS;QAA+B,MAAM,IAAI,OAAO,WAAW;IAAG;IACrH;QAAE,IAAI;QAAa,OAAO;QAAa,SAAS;QAAqB,MAAM,IAAI,KAAK,KAAK,GAAG,KAAK,UAAU,WAAW;IAAG;CAC1H","debugId":null}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["\nimport Database from 'better-sqlite3';\nimport path from 'path';\nimport fs from 'fs';\nimport type { User, Event, Announcement } from './types';\nimport { defaultUsers, defaultEvents, defaultAnnouncements } from './default-data';\n\nconst DATA_DIR = path.join(process.cwd(), 'data');\nconst DB_PATH = path.join(DATA_DIR, 'minevent.sqlite');\nconsole.log(`[DB] Database path: ${DB_PATH}`);\n\nif (!fs.existsSync(DATA_DIR)) {\n  console.log(`[DB] Data directory does not exist. Creating: ${DATA_DIR}`);\n  fs.mkdirSync(DATA_DIR, { recursive: true });\n}\n\nexport const db = new Database(DB_PATH);\ndb.pragma('journal_mode = WAL');\ndb.pragma('foreign_keys = ON');\n\nfunction tableExists(tableName: string): boolean {\n  const stmt = db.prepare(\"SELECT name FROM sqlite_master WHERE type='table' AND name = ? COLLATE NOCASE;\");\n  return !!stmt.get(tableName);\n}\n\nfunction columnExists(tableName: string, columnName: string): boolean {\n  if (!tableExists(tableName)) return false;\n  try {\n    const stmt = db.prepare(`PRAGMA table_info(${tableName});`);\n    const columns = stmt.all() as { name: string }[];\n    return columns.some(col => col.name.toLowerCase() === columnName.toLowerCase());\n  } catch (e) {\n    console.error(`[DB] Error checking column ${columnName} in ${tableName}:`, e);\n    return false; // Assume not exists if pragma fails\n  }\n}\n\nfunction initializeDatabase() {\n  console.log('[DB] Initializing database schema and data...');\n\n  let usersTableWasRecreated = false;\n  if (tableExists('users')) {\n    const hasQQ = columnExists('users', 'qqNumber');\n    const hasBan = columnExists('users', 'ban');\n    if (!hasQQ || !hasBan) {\n      console.warn(`[DB] Users table is missing 'qqNumber' (exists: ${hasQQ}) or 'ban' (exists: ${hasBan}) column. Dropping and recreating tables.`);\n      try {\n        db.exec('DROP TABLE IF EXISTS event_participants;');\n        db.exec('DROP TABLE IF EXISTS events;'); // Drop events too as it has FK to users\n        db.exec('DROP TABLE IF EXISTS users;');\n        console.log(\"[DB] Dropped 'event_participants', 'events', and 'users' tables for schema refresh.\");\n        usersTableWasRecreated = true;\n      } catch (e: any) {\n        console.error(\"[DB] CRITICAL: Error dropping tables for schema refresh:\", e.message);\n        // If dropping fails, subsequent CREATE TABLE IF NOT EXISTS might hit issues with the old schema.\n        // This is a critical state.\n      }\n    }\n  } else {\n    usersTableWasRecreated = true; // Users table doesn't exist, so it will be created.\n  }\n\n  // Create tables - these will only execute if the tables don't exist (or were just dropped)\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS users (\n      id TEXT PRIMARY KEY,\n      username TEXT NOT NULL UNIQUE,\n      avatarUrl TEXT,\n      op INTEGER DEFAULT 0,\n      password TEXT,\n      qqNumber TEXT UNIQUE,\n      ban INTEGER DEFAULT 0 \n    );\n  `);\n  console.log('[DB] Users table schema ensured.');\n\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS events (\n      id TEXT PRIMARY KEY,\n      name TEXT NOT NULL,\n      date TEXT NOT NULL,\n      description TEXT NOT NULL,\n      participantLimit INTEGER,\n      cdKey TEXT NOT NULL, \n      imageUrl TEXT,\n      organizerId TEXT NOT NULL,\n      endDate TEXT,\n      timeMode TEXT NOT NULL DEFAULT 'specified',\n      isCheckInEnabled INTEGER NOT NULL DEFAULT 1,\n      FOREIGN KEY (organizerId) REFERENCES users(id) ON DELETE CASCADE\n    );\n  `);\n  console.log('[DB] Events table schema ensured.');\n\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS announcements (\n      id TEXT PRIMARY KEY,\n      title TEXT NOT NULL,\n      content TEXT NOT NULL,\n      date TEXT NOT NULL\n    );\n  `);\n  console.log('[DB] Announcements table schema ensured.');\n\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS event_participants (\n      eventId TEXT NOT NULL,\n      userId TEXT NOT NULL,\n      isCheckedIn INTEGER DEFAULT 0,\n      PRIMARY KEY (eventId, userId),\n      FOREIGN KEY (eventId) REFERENCES events(id) ON DELETE CASCADE,\n      FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE\n    );\n  `);\n  console.log('[DB] Event_participants table schema ensured.');\n  \n  // Seed Users\n  const userCountStmt = db.prepare('SELECT COUNT(*) as count FROM users;');\n  const userCountResult = userCountStmt.get() as { count: number };\n\n  if (userCountResult.count === 0 || usersTableWasRecreated) {\n    console.log(usersTableWasRecreated ? '[DB] Re-seeding users table as it was recreated.' : '[DB] Users table is empty. Seeding default users...');\n    const insertUser = db.prepare('INSERT INTO users (id, username, avatarUrl, op, password, qqNumber, ban) VALUES (@id, @username, @avatarUrl, @op, @password, @qqNumber, @ban)');\n    db.transaction(() => {\n      for (const user of defaultUsers) {\n        insertUser.run({\n          id: user.id,\n          username: user.username,\n          avatarUrl: user.avatarUrl || `https://placehold.co/100x100.png?text=${user.username.substring(0,2)}`,\n          op: user.op || 0,\n          password: user.password || '123456',\n          qqNumber: user.qqNumber || null,\n          ban: user.ban === undefined ? 0 : user.ban\n        });\n      }\n    })();\n    console.log('[DB] Users table seeded.');\n  } else {\n     console.log('[DB] Users table not empty and schema likely up-to-date. Ensuring default users are present/updated via UPSERT.');\n     const upsertUser = db.prepare(`\n      INSERT INTO users (id, username, avatarUrl, op, password, qqNumber, ban) \n      VALUES (@id, @username, @avatarUrl, @op, @password, @qqNumber, @ban)\n      ON CONFLICT(id) DO UPDATE SET\n        username = excluded.username,\n        avatarUrl = excluded.avatarUrl,\n        op = excluded.op,\n        password = excluded.password,\n        qqNumber = excluded.qqNumber, \n        ban = excluded.ban;\n    `);\n     db.transaction(() => {\n        for (const user of defaultUsers) {\n            upsertUser.run({\n                id: user.id,\n                username: user.username,\n                avatarUrl: user.avatarUrl || `https://placehold.co/100x100.png?text=${user.username.substring(0,2)}`,\n                op: user.op || 0,\n                password: user.password || '123456',\n                qqNumber: user.qqNumber || null,\n                ban: user.ban === undefined ? 0 : user.ban\n            });\n        }\n    })();\n    console.log('[DB] Default users ensured/updated.');\n  }\n\n  // Seed Events (and participants)\n  const eventCountStmt = db.prepare('SELECT COUNT(*) as count FROM events');\n  const eventCount = eventCountStmt.get() as { count: number };\n  if (eventCount.count === 0 || usersTableWasRecreated) { // Re-seed events if users table was recreated\n    if (eventCount.count > 0 && usersTableWasRecreated) {\n        console.log(\"[DB] Re-seeding events and participants because users table was recreated.\");\n        db.exec('DELETE FROM event_participants;');\n        db.exec('DELETE FROM events;');\n    }\n    console.log('[DB] Seeding events and event_participants tables...');\n    const insertEvent = db.prepare('INSERT INTO events (id, name, date, description, participantLimit, cdKey, imageUrl, organizerId, endDate, timeMode, isCheckInEnabled) VALUES (@id, @name, @date, @description, @participantLimit, @cdKey, @imageUrl, @organizerId, @endDate, @timeMode, @isCheckInEnabled)');\n    const insertParticipant = db.prepare('INSERT INTO event_participants (eventId, userId, isCheckedIn) VALUES (@eventId, @userId, @isCheckedIn)');\n    \n    db.transaction(() => {\n      for (const event of defaultEvents) {\n        const organizerExists = db.prepare('SELECT id FROM users WHERE id = ?').get(event.organizerId);\n        if (!organizerExists) {\n            console.warn(`[DB] Organizer ${event.organizerId} for event ${event.name} not found. Skipping event seeding.`);\n            continue;\n        }\n        insertEvent.run({\n          id: event.id,\n          name: event.name,\n          date: event.date,\n          description: event.description,\n          participantLimit: event.participantLimit === undefined ? null : event.participantLimit,\n          cdKey: event.cdKey,\n          imageUrl: event.imageUrl || '',\n          organizerId: event.organizerId,\n          endDate: event.endDate || null,\n          timeMode: event.timeMode || 'specified',\n          isCheckInEnabled: event.isCheckInEnabled === undefined ? 1 : (event.isCheckInEnabled ? 1 : 0),\n        });\n        for (const p of event.participants) {\n          const userExists = db.prepare('SELECT id FROM users WHERE id = ?').get(p.id);\n          if (userExists) {\n            insertParticipant.run({\n              eventId: event.id,\n              userId: p.id,\n              isCheckedIn: p.isCheckedIn ? 1 : 0\n            });\n          } else {\n            console.warn(`[DB] Skipping participant ${p.id} for event ${event.id} as user does not exist.`);\n          }\n        }\n      }\n    })();\n    console.log('[DB] Events and event_participants tables seeded.');\n  }\n  \n  // Seed Announcements\n  const announcementCountStmt = db.prepare('SELECT COUNT(*) as count FROM announcements');\n  const announcementCount = announcementCountStmt.get() as { count: number };\n  if (announcementCount.count === 0 || usersTableWasRecreated) {\n    if (announcementCount.count > 0 && usersTableWasRecreated) {\n        console.log(\"[DB] Re-seeding announcements because users table was recreated.\");\n        db.exec('DELETE FROM announcements;');\n    }\n    console.log('[DB] Seeding announcements table...');\n    const insertAnnouncement = db.prepare('INSERT INTO announcements (id, title, content, date) VALUES (@id, @title, @content, @date)');\n    db.transaction(() => {\n      for (const announcement of defaultAnnouncements) {\n        insertAnnouncement.run(announcement);\n      }\n    })();\n    console.log('[DB] Announcements table seeded.');\n  }\n  console.log('[DB] Database initialization routine complete.');\n}\n\ntry {\n  initializeDatabase();\n} catch (err: any) {\n  console.error(\"[DB] CRITICAL: Database initialization failed during module load:\", err.message, err.stack);\n}\n\nexport default db;\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.ts"],"sourcesContent":["\n'use server';\nimport db from './db'; // db instance from db.ts\nimport type { Event, User, Participant, Announcement } from './types';\nimport { parseISO } from 'date-fns';\n\n// --- User Functions ---\nexport async function getUsers(): Promise<User[]> {\n  const stmt = db.prepare('SELECT id, username, avatarUrl, op, password, qqNumber, ban FROM users');\n  return stmt.all() as User[];\n}\n\nexport async function getUserById(userId: string): Promise<User | undefined> {\n  const stmt = db.prepare('SELECT id, username, avatarUrl, op, password, qqNumber, ban FROM users WHERE id = ?');\n  return stmt.get(userId) as User | undefined;\n}\n\nexport async function getUserByUsername(username: string): Promise<User | undefined> {\n  const stmt = db.prepare('SELECT id, username, avatarUrl, op, password, qqNumber, ban FROM users WHERE lower(username) = lower(?)');\n  return stmt.get(username) as User | undefined;\n}\n\nexport async function getUserByQQNumber(qqNumber: string): Promise<User | undefined> {\n  if (!qqNumber || qqNumber.trim() === '') return undefined;\n  const stmt = db.prepare('SELECT id, username, avatarUrl, op, password, qqNumber, ban FROM users WHERE qqNumber = ?');\n  return stmt.get(qqNumber) as User | undefined;\n}\n\nexport async function createUser(userData: Omit<User, 'op' | 'avatarUrl' | 'ban'> & Partial<Pick<User, 'op' | 'avatarUrl' | 'password' | 'qqNumber' | 'ban'>>): Promise<User> {\n  const newUser: User = {\n    id: userData.id || userData.username, \n    username: userData.username,\n    avatarUrl: userData.avatarUrl || `https://placehold.co/100x100.png?text=${userData.username.substring(0, 2).toUpperCase()}`,\n    op: userData.op || 0,\n    password: userData.password, \n    qqNumber: userData.qqNumber || undefined, \n    ban: userData.ban === undefined ? 0 : userData.ban,\n  };\n\n  const stmt = db.prepare('INSERT INTO users (id, username, avatarUrl, op, password, qqNumber, ban) VALUES (@id, @username, @avatarUrl, @op, @password, @qqNumber, @ban)');\n  try {\n    stmt.run(newUser);\n    const createdUser = await getUserById(newUser.id);\n    if (!createdUser) throw new Error('User creation seemed successful but could not fetch the new user.');\n    return createdUser;\n  } catch (error) {\n    console.error(`[Data] Failed to create user ${userData.username}:`, error);\n    throw new Error(`[Data] Failed to create user ${userData.username}: ${(error as Error).message}`);\n  }\n}\n\nexport async function updateUserById(userId: string, userData: Partial<Pick<User, 'username' | 'avatarUrl' | 'op' | 'password' | 'qqNumber' | 'ban'>>): Promise<User | null> {\n  const currentUser = await getUserById(userId);\n  if (!currentUser) return null;\n\n  const fieldsToUpdate: Record<string, any> = {};\n  if (userData.username !== undefined) fieldsToUpdate.username = userData.username;\n  if (userData.avatarUrl !== undefined) fieldsToUpdate.avatarUrl = userData.avatarUrl; \n  if (userData.op !== undefined) fieldsToUpdate.op = userData.op;\n  if (userData.password !== undefined && userData.password !== '') fieldsToUpdate.password = userData.password; \n  if (userData.qqNumber !== undefined) fieldsToUpdate.qqNumber = userData.qqNumber === '' ? null : userData.qqNumber; \n  if (userData.ban !== undefined) fieldsToUpdate.ban = userData.ban;\n\n\n  if (Object.keys(fieldsToUpdate).length === 0) {\n    return currentUser; \n  }\n\n  const setClauses = Object.keys(fieldsToUpdate).map(key => `${key} = @${key}`).join(', ');\n  const stmt = db.prepare(`UPDATE users SET ${setClauses} WHERE id = @id`);\n  \n  try {\n    stmt.run({ ...fieldsToUpdate, id: userId });\n  } catch (error) {\n    console.error(`[Data] Failed to update user ${userId}:`, error);\n    throw new Error(`[Data] Failed to update user ${userId}: ${(error as Error).message}`);\n  }\n  \n  return await getUserById(userId); \n}\n\nexport async function deleteUserById(userId: string): Promise<{ success: boolean, message: string }> {\n  const eventOrganizerCheckStmt = db.prepare('SELECT COUNT(*) as count FROM events WHERE organizerId = ?');\n  const organizerCountResult = eventOrganizerCheckStmt.get(userId) as { count: number };\n\n  if (organizerCountResult.count > 0) {\n    return { success: false, message: `无法删除用户 ${userId}，因为他们是 ${organizerCountResult.count} 个活动的组织者。请先转移或删除这些活动。` };\n  }\n  \n  const deleteUserStmt = db.prepare('DELETE FROM users WHERE id = ?');\n  const result = deleteUserStmt.run(userId); // Foreign key ON DELETE CASCADE handles event_participants\n\n  if (result.changes > 0) {\n    return { success: true, message: `用户 ${userId} 已成功删除。` };\n  }\n  return { success: false, message: `用户 ${userId} 未找到，无法删除。` };\n}\n\n\n// --- Event Functions ---\nasync function getEventParticipants(eventId: string): Promise<Participant[]> {\n  const stmt = db.prepare(`\n    SELECT u.id, u.username, u.avatarUrl, u.op, u.password, u.qqNumber, u.ban, ep.isCheckedIn\n    FROM users u\n    JOIN event_participants ep ON u.id = ep.userId\n    WHERE ep.eventId = ?\n  `);\n  const participantsData = stmt.all(eventId) as Array<Omit<Participant, 'joinedEventIds'>>;\n  return participantsData.map(p => ({...p, isCheckedIn: !!p.isCheckedIn, ban: p.ban || 0}));\n}\n\nexport async function getEvents(): Promise<Event[]> {\n  const eventsStmt = db.prepare('SELECT id, name, date, description, participantLimit, cdKey, imageUrl, organizerId, endDate, timeMode, isCheckInEnabled FROM events');\n  const rawEvents = eventsStmt.all() as Array<Omit<Event, 'participants'>>;\n  \n  const events: Event[] = [];\n  for (const rawEvent of rawEvents) {\n    const participants = await getEventParticipants(rawEvent.id);\n    events.push({ ...rawEvent, participants, isCheckInEnabled: !!rawEvent.isCheckInEnabled });\n  }\n  return events;\n}\n\nexport async function getEventById(id: string): Promise<Event | undefined> {\n  const eventStmt = db.prepare('SELECT id, name, date, description, participantLimit, cdKey, imageUrl, organizerId, endDate, timeMode, isCheckInEnabled FROM events WHERE id = ?');\n  const rawEvent = eventStmt.get(id) as Omit<Event, 'participants'> | undefined;\n\n  if (!rawEvent) return undefined;\n\n  const participants = await getEventParticipants(rawEvent.id);\n  return { ...rawEvent, participants, isCheckInEnabled: !!rawEvent.isCheckInEnabled };\n}\n\nexport async function getEventsForUser(userId: string): Promise<Event[]> {\n  const stmt = db.prepare(`\n    SELECT e.id, e.name, e.date, e.description, e.participantLimit, e.cdKey, e.imageUrl, e.organizerId, e.endDate, e.timeMode, e.isCheckInEnabled\n    FROM events e\n    JOIN event_participants ep ON e.id = ep.eventId\n    WHERE ep.userId = ?\n  `);\n  const rawEvents = stmt.all(userId) as Array<Omit<Event, 'participants'>>;\n  \n  const joinedEvents: Event[] = [];\n  for (const rawEvent of rawEvents) {\n    const participants = await getEventParticipants(rawEvent.id);\n    joinedEvents.push({ ...rawEvent, participants, isCheckInEnabled: !!rawEvent.isCheckInEnabled });\n  }\n  return joinedEvents;\n}\n\n\nexport async function getEventByCdKey(cdKey: string): Promise<Event | undefined> {\n  const eventStmt = db.prepare('SELECT id, name, date, description, participantLimit, cdKey, imageUrl, organizerId, endDate, timeMode, isCheckInEnabled FROM events WHERE lower(cdKey) = lower(?)');\n  const rawEvent = eventStmt.get(cdKey) as Omit<Event, 'participants'> | undefined;\n\n  if (!rawEvent) return undefined;\n\n  const participants = await getEventParticipants(rawEvent.id);\n  return { ...rawEvent, participants, isCheckInEnabled: !!rawEvent.isCheckInEnabled };\n}\n\nexport async function createEvent(eventData: Omit<Event, 'id' | 'participants' | 'organizerId'>, organizerId: string): Promise<Event> {\n  const newEventId = `event_${Date.now()}_${Math.random().toString(36).substring(2, 7)}`;\n  const participantLimit = (typeof eventData.participantLimit === 'number' && !isNaN(eventData.participantLimit)) ? eventData.participantLimit : null;\n\n  let finalCdKey = eventData.cdKey;\n  if (eventData.timeMode === 'long-term') {\n    finalCdKey = `LT_${Date.now().toString(36)}_${Math.random().toString(36).substring(2, 7)}`;\n  }\n  \n  const newEventRow = {\n    id: newEventId,\n    name: eventData.name,\n    date: eventData.date, \n    description: eventData.description,\n    participantLimit: participantLimit,\n    cdKey: finalCdKey,\n    imageUrl: eventData.imageUrl || '',\n    organizerId,\n    endDate: eventData.timeMode === 'specified' ? eventData.endDate || null : null,\n    timeMode: eventData.timeMode || 'specified',\n    isCheckInEnabled: eventData.timeMode === 'long-term' ? 0 : (eventData.isCheckInEnabled === undefined ? 1 : (eventData.isCheckInEnabled ? 1 : 0)),\n  };\n\n  const stmt = db.prepare('INSERT INTO events (id, name, date, description, participantLimit, cdKey, imageUrl, organizerId, endDate, timeMode, isCheckInEnabled) VALUES (@id, @name, @date, @description, @participantLimit, @cdKey, @imageUrl, @organizerId, @endDate, @timeMode, @isCheckInEnabled)');\n  stmt.run(newEventRow);\n  const createdEvent = await getEventById(newEventId);\n  if (!createdEvent) throw new Error('[Data] Event creation seemed successful but could not fetch the new event.');\n  return createdEvent;\n}\n\nexport async function updateEventById(eventId: string, eventData: Partial<Omit<Event, 'id' | 'participants' | 'organizerId'>>): Promise<Event | null> {\n  const { name, date, description, participantLimit, cdKey, imageUrl, endDate, timeMode, isCheckInEnabled } = eventData;\n  \n  const existingEvent = await getEventById(eventId);\n  if (!existingEvent) return null;\n\n  const fieldsToUpdate: Record<string, any> = {};\n  if (name !== undefined) fieldsToUpdate.name = name;\n  if (date !== undefined) fieldsToUpdate.date = date; \n  if (description !== undefined) fieldsToUpdate.description = description;\n  \n  if (participantLimit !== undefined) { \n    fieldsToUpdate.participantLimit = (typeof participantLimit === 'number' && !isNaN(participantLimit)) ? participantLimit : null;\n  }\n  \n  if (cdKey !== undefined && (timeMode || existingEvent.timeMode) !== 'long-term') {\n     fieldsToUpdate.cdKey = cdKey;\n  }\n\n  if (imageUrl !== undefined) fieldsToUpdate.imageUrl = imageUrl;\n\n  const effectiveTimeMode = timeMode || existingEvent.timeMode;\n  if (timeMode !== undefined && timeMode !== existingEvent.timeMode) fieldsToUpdate.timeMode = timeMode;\n\n\n  if (effectiveTimeMode === 'long-term') {\n    fieldsToUpdate.endDate = null;\n    fieldsToUpdate.isCheckInEnabled = 0;\n  } else { // 'specified'\n    if (endDate !== undefined) fieldsToUpdate.endDate = endDate || null; // Allow clearing endDate\n    if (isCheckInEnabled !== undefined) fieldsToUpdate.isCheckInEnabled = isCheckInEnabled ? 1 : 0;\n  }\n\n\n  if (Object.keys(fieldsToUpdate).length === 0) {\n    return existingEvent;\n  }\n\n  const setClauses = Object.keys(fieldsToUpdate).map(key => `${key} = @${key}`).join(', ');\n  const stmt = db.prepare(`UPDATE events SET ${setClauses} WHERE id = @eventId`);\n  \n  stmt.run({ ...fieldsToUpdate, eventId });\n  \n  return await getEventById(eventId);\n}\n\nexport async function deleteEventById(eventId: string): Promise<{ success: boolean, message: string }> {\n  const stmt = db.prepare('DELETE FROM events WHERE id = ?');\n  const result = stmt.run(eventId); // Foreign key ON DELETE CASCADE should handle event_participants\n\n  if (result.changes > 0) {\n    return { success: true, message: \"活动已成功删除。\" };\n  }\n  return { success: false, message: \"活动未找到，无法删除。\" };\n}\n\nexport async function joinEvent(userId: string, eventId: string, cdKeyInput: string): Promise<{ success: boolean, message: string, event?: Event }> {\n  const event = await getEventById(eventId);\n  if (!event) return { success: false, message: '活动未找到。' };\n\n  const user = await getUserById(userId);\n  if (!user) return { success: false, message: '用户未找到。' };\n  if (user.ban === 1) return { success: false, message: '您的账户已被封禁，无法加入活动。'};\n\n\n  if (event.timeMode !== 'long-term' && event.cdKey.toLowerCase() !== cdKeyInput.toLowerCase()) {\n     return { success: false, message: '无效的活动代码。' };\n  }\n  \n  const currentParticipants = await getEventParticipants(eventId);\n  if (event.participantLimit && currentParticipants.length >= event.participantLimit) {\n    return { success: false, message: '活动人数已满。' };\n  }\n  if (currentParticipants.some(p => p.id === userId)) {\n    const refreshedEvent = await getEventById(eventId);\n    return { success: true, message: '您已加入此活动。', event: refreshedEvent };\n  }\n\n  const stmt = db.prepare('INSERT INTO event_participants (eventId, userId, isCheckedIn) VALUES (?, ?, 0)');\n  stmt.run(eventId, userId);\n  \n  const finalEvent = await getEventById(eventId);\n  return { success: true, message: '成功加入活动！', event: finalEvent };\n}\n\nexport async function leaveEvent(userId: string, eventId: string): Promise<{ success: boolean, message: string, event?: Event }> {\n  const event = await getEventById(eventId);\n  if (!event) return { success: false, message: '活动未找到。' };\n\n  const stmt = db.prepare('DELETE FROM event_participants WHERE eventId = ? AND userId = ?');\n  const result = stmt.run(eventId, userId);\n\n  if (result.changes > 0) {\n    const updatedEvent = await getEventById(eventId);\n    return { success: true, message: '成功离开活动。', event: updatedEvent };\n  }\n  return { success: false, message: '您当前未加入此活动，或离开失败。' };\n}\n\nexport async function checkInUser(userId: string, eventId: string): Promise<{ success: boolean, message: string }> {\n  const event = await getEventById(eventId);\n  if (!event) return { success: false, message: '活动未找到。' };\n  \n  const user = await getUserById(userId);\n  if (!user) return { success: false, message: '用户未找到。' };\n  if (user.ban === 1) return { success: false, message: '您的账户已被封禁，无法签到。'};\n\n  if (!event.isCheckInEnabled) {\n      return { success: false, message: '此活动的签到功能已禁用。' };\n  }\n  if (event.timeMode === 'long-term') {\n      return { success: false, message: '长期活动无需签到。' };\n  }\n\n  const participants = await getEventParticipants(eventId);\n  const participant = participants.find(p => p.id === userId);\n\n  if (!participant) return { success: false, message: '您未报名参加此活动。' };\n  if (participant.isCheckedIn) return { success: true, message: '您已签到。' };\n\n  const eventStartDate = parseISO(event.date);\n  const eventEndDate = event.endDate ? parseISO(event.endDate) : null;\n  const now = new Date();\n\n  let canCheckIn = false;\n  if (event.timeMode === 'specified') {\n    if (eventEndDate) { \n      canCheckIn = now >= eventStartDate && now <= eventEndDate;\n    } else { \n      const eventDayStart = new Date(eventStartDate.getFullYear(), eventStartDate.getMonth(), eventStartDate.getDate(), 0, 0, 0);\n      const eventDayEnd = new Date(eventStartDate.getFullYear(), eventStartDate.getMonth(), eventStartDate.getDate(), 23, 59, 59, 999);\n      canCheckIn = now >= eventDayStart && now <= eventDayEnd;\n    }\n  }\n\n  if (!canCheckIn) {\n    return { success: false, message: '此活动的签到尚未开始或已结束。' };\n  }\n\n  const stmt = db.prepare('UPDATE event_participants SET isCheckedIn = 1 WHERE eventId = ? AND userId = ?');\n  stmt.run(eventId, userId);\n  return { success: true, message: '签到成功！' };\n}\n\n// --- Announcement Functions ---\nexport async function getAnnouncements(): Promise<Announcement[]> {\n  const stmt = db.prepare('SELECT id, title, content, date FROM announcements ORDER BY date DESC');\n  const announcements = stmt.all() as Announcement[];\n  return announcements.map(ann => ({...ann, date: ann.date || new Date().toISOString()}));\n}\n\n// --- Helper for actions.ts ---\nexport async function getEventsOrganizedByUser(userId: string): Promise<Event[]> {\n  const stmt = db.prepare('SELECT id, name, date, description, participantLimit, cdKey, imageUrl, organizerId, endDate, timeMode, isCheckInEnabled FROM events WHERE organizerId = ? ORDER BY date DESC');\n  const rawEvents = stmt.all(userId) as Array<Omit<Event, 'participants'>>;\n  \n  const events: Event[] = [];\n  for (const rawEvent of rawEvents) {\n    const participants = await getEventParticipants(rawEvent.id);\n    events.push({ ...rawEvent, participants, isCheckInEnabled: !!rawEvent.isCheckInEnabled });\n  }\n  return events;\n}\n\n    "],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,kMAAuB,yBAAyB;AAEhD;;;;;;AAGO,eAAe,uCAAM,GAAN;IACpB,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,OAAO,KAAK,GAAG;AACjB;AAEO,eAAe,uCAAS,GAAT,YAAY,MAAc;IAC9C,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,OAAO,KAAK,GAAG,CAAC;AAClB;AAEO,eAAe,uCAAe,GAAf,kBAAkB,QAAgB;IACtD,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,OAAO,KAAK,GAAG,CAAC;AAClB;AAEO,eAAe,uCAAe,GAAf,kBAAkB,QAAgB;IACtD,IAAI,CAAC,YAAY,SAAS,IAAI,OAAO,IAAI,OAAO;IAChD,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,OAAO,KAAK,GAAG,CAAC;AAClB;AAEO,eAAe,uCAAQ,GAAR,WAAW,QAA4H;IAC3J,MAAM,UAAgB;QACpB,IAAI,SAAS,EAAE,IAAI,SAAS,QAAQ;QACpC,UAAU,SAAS,QAAQ;QAC3B,WAAW,SAAS,SAAS,IAAI,CAAC,sCAAsC,EAAE,SAAS,QAAQ,CAAC,SAAS,CAAC,GAAG,GAAG,WAAW,IAAI;QAC3H,IAAI,SAAS,EAAE,IAAI;QACnB,UAAU,SAAS,QAAQ;QAC3B,UAAU,SAAS,QAAQ,IAAI;QAC/B,KAAK,SAAS,GAAG,KAAK,YAAY,IAAI,SAAS,GAAG;IACpD;IAEA,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,IAAI;QACF,KAAK,GAAG,CAAC;QACT,MAAM,cAAc,MAAM,YAAY,QAAQ,EAAE;QAChD,IAAI,CAAC,aAAa,MAAM,IAAI,MAAM;QAClC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,6BAA6B,EAAE,SAAS,QAAQ,CAAC,CAAC,CAAC,EAAE;QACpE,MAAM,IAAI,MAAM,CAAC,6BAA6B,EAAE,SAAS,QAAQ,CAAC,EAAE,EAAE,AAAC,MAAgB,OAAO,EAAE;IAClG;AACF;AAEO,eAAe,uCAAY,GAAZ,eAAe,MAAc,EAAE,QAAgG;IACnJ,MAAM,cAAc,MAAM,YAAY;IACtC,IAAI,CAAC,aAAa,OAAO;IAEzB,MAAM,iBAAsC,CAAC;IAC7C,IAAI,SAAS,QAAQ,KAAK,WAAW,eAAe,QAAQ,GAAG,SAAS,QAAQ;IAChF,IAAI,SAAS,SAAS,KAAK,WAAW,eAAe,SAAS,GAAG,SAAS,SAAS;IACnF,IAAI,SAAS,EAAE,KAAK,WAAW,eAAe,EAAE,GAAG,SAAS,EAAE;IAC9D,IAAI,SAAS,QAAQ,KAAK,aAAa,SAAS,QAAQ,KAAK,IAAI,eAAe,QAAQ,GAAG,SAAS,QAAQ;IAC5G,IAAI,SAAS,QAAQ,KAAK,WAAW,eAAe,QAAQ,GAAG,SAAS,QAAQ,KAAK,KAAK,OAAO,SAAS,QAAQ;IAClH,IAAI,SAAS,GAAG,KAAK,WAAW,eAAe,GAAG,GAAG,SAAS,GAAG;IAGjE,IAAI,OAAO,IAAI,CAAC,gBAAgB,MAAM,KAAK,GAAG;QAC5C,OAAO;IACT;IAEA,MAAM,aAAa,OAAO,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAA,MAAO,GAAG,IAAI,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IACnF,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC,CAAC,iBAAiB,EAAE,WAAW,eAAe,CAAC;IAEvE,IAAI;QACF,KAAK,GAAG,CAAC;YAAE,GAAG,cAAc;YAAE,IAAI;QAAO;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC,CAAC,EAAE;QACzD,MAAM,IAAI,MAAM,CAAC,6BAA6B,EAAE,OAAO,EAAE,EAAE,AAAC,MAAgB,OAAO,EAAE;IACvF;IAEA,OAAO,MAAM,YAAY;AAC3B;AAEO,eAAe,uCAAY,GAAZ,eAAe,MAAc;IACjD,MAAM,0BAA0B,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IAC3C,MAAM,uBAAuB,wBAAwB,GAAG,CAAC;IAEzD,IAAI,qBAAqB,KAAK,GAAG,GAAG;QAClC,OAAO;YAAE,SAAS;YAAO,SAAS,CAAC,OAAO,EAAE,OAAO,OAAO,EAAE,qBAAqB,KAAK,CAAC,qBAAqB,CAAC;QAAC;IAChH;IAEA,MAAM,iBAAiB,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IAClC,MAAM,SAAS,eAAe,GAAG,CAAC,SAAS,2DAA2D;IAEtG,IAAI,OAAO,OAAO,GAAG,GAAG;QACtB,OAAO;YAAE,SAAS;YAAM,SAAS,CAAC,GAAG,EAAE,OAAO,OAAO,CAAC;QAAC;IACzD;IACA,OAAO;QAAE,SAAS;QAAO,SAAS,CAAC,GAAG,EAAE,OAAO,UAAU,CAAC;IAAC;AAC7D;AAGA,0BAA0B;AAC1B,eAAe,qBAAqB,OAAe;IACjD,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC,CAAC;;;;;EAKzB,CAAC;IACD,MAAM,mBAAmB,KAAK,GAAG,CAAC;IAClC,OAAO,iBAAiB,GAAG,CAAC,CAAA,IAAK,CAAC;YAAC,GAAG,CAAC;YAAE,aAAa,CAAC,CAAC,EAAE,WAAW;YAAE,KAAK,EAAE,GAAG,IAAI;QAAC,CAAC;AACzF;AAEO,eAAe,uCAAO,GAAP;IACpB,MAAM,aAAa,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IAC9B,MAAM,YAAY,WAAW,GAAG;IAEhC,MAAM,SAAkB,EAAE;IAC1B,KAAK,MAAM,YAAY,UAAW;QAChC,MAAM,eAAe,MAAM,qBAAqB,SAAS,EAAE;QAC3D,OAAO,IAAI,CAAC;YAAE,GAAG,QAAQ;YAAE;YAAc,kBAAkB,CAAC,CAAC,SAAS,gBAAgB;QAAC;IACzF;IACA,OAAO;AACT;AAEO,eAAe,uCAAU,GAAV,aAAa,EAAU;IAC3C,MAAM,YAAY,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IAC7B,MAAM,WAAW,UAAU,GAAG,CAAC;IAE/B,IAAI,CAAC,UAAU,OAAO;IAEtB,MAAM,eAAe,MAAM,qBAAqB,SAAS,EAAE;IAC3D,OAAO;QAAE,GAAG,QAAQ;QAAE;QAAc,kBAAkB,CAAC,CAAC,SAAS,gBAAgB;IAAC;AACpF;AAEO,eAAe,uCAAc,GAAd,iBAAiB,MAAc;IACnD,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC,CAAC;;;;;EAKzB,CAAC;IACD,MAAM,YAAY,KAAK,GAAG,CAAC;IAE3B,MAAM,eAAwB,EAAE;IAChC,KAAK,MAAM,YAAY,UAAW;QAChC,MAAM,eAAe,MAAM,qBAAqB,SAAS,EAAE;QAC3D,aAAa,IAAI,CAAC;YAAE,GAAG,QAAQ;YAAE;YAAc,kBAAkB,CAAC,CAAC,SAAS,gBAAgB;QAAC;IAC/F;IACA,OAAO;AACT;AAGO,eAAe,uCAAa,GAAb,gBAAgB,KAAa;IACjD,MAAM,YAAY,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IAC7B,MAAM,WAAW,UAAU,GAAG,CAAC;IAE/B,IAAI,CAAC,UAAU,OAAO;IAEtB,MAAM,eAAe,MAAM,qBAAqB,SAAS,EAAE;IAC3D,OAAO;QAAE,GAAG,QAAQ;QAAE;QAAc,kBAAkB,CAAC,CAAC,SAAS,gBAAgB;IAAC;AACpF;AAEO,eAAe,uCAAS,GAAT,YAAY,SAA6D,EAAE,WAAmB;IAClH,MAAM,aAAa,CAAC,MAAM,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI;IACtF,MAAM,mBAAmB,AAAC,OAAO,UAAU,gBAAgB,KAAK,YAAY,CAAC,MAAM,UAAU,gBAAgB,IAAK,UAAU,gBAAgB,GAAG;IAE/I,IAAI,aAAa,UAAU,KAAK;IAChC,IAAI,UAAU,QAAQ,KAAK,aAAa;QACtC,aAAa,CAAC,GAAG,EAAE,KAAK,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI;IAC5F;IAEA,MAAM,cAAc;QAClB,IAAI;QACJ,MAAM,UAAU,IAAI;QACpB,MAAM,UAAU,IAAI;QACpB,aAAa,UAAU,WAAW;QAClC,kBAAkB;QAClB,OAAO;QACP,UAAU,UAAU,QAAQ,IAAI;QAChC;QACA,SAAS,UAAU,QAAQ,KAAK,cAAc,UAAU,OAAO,IAAI,OAAO;QAC1E,UAAU,UAAU,QAAQ,IAAI;QAChC,kBAAkB,UAAU,QAAQ,KAAK,cAAc,IAAK,UAAU,gBAAgB,KAAK,YAAY,IAAK,UAAU,gBAAgB,GAAG,IAAI;IAC/I;IAEA,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,KAAK,GAAG,CAAC;IACT,MAAM,eAAe,MAAM,aAAa;IACxC,IAAI,CAAC,cAAc,MAAM,IAAI,MAAM;IACnC,OAAO;AACT;AAEO,eAAe,uCAAa,GAAb,gBAAgB,OAAe,EAAE,SAAsE;IAC3H,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,gBAAgB,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,GAAG;IAE5G,MAAM,gBAAgB,MAAM,aAAa;IACzC,IAAI,CAAC,eAAe,OAAO;IAE3B,MAAM,iBAAsC,CAAC;IAC7C,IAAI,SAAS,WAAW,eAAe,IAAI,GAAG;IAC9C,IAAI,SAAS,WAAW,eAAe,IAAI,GAAG;IAC9C,IAAI,gBAAgB,WAAW,eAAe,WAAW,GAAG;IAE5D,IAAI,qBAAqB,WAAW;QAClC,eAAe,gBAAgB,GAAG,AAAC,OAAO,qBAAqB,YAAY,CAAC,MAAM,oBAAqB,mBAAmB;IAC5H;IAEA,IAAI,UAAU,aAAa,CAAC,YAAY,cAAc,QAAQ,MAAM,aAAa;QAC9E,eAAe,KAAK,GAAG;IAC1B;IAEA,IAAI,aAAa,WAAW,eAAe,QAAQ,GAAG;IAEtD,MAAM,oBAAoB,YAAY,cAAc,QAAQ;IAC5D,IAAI,aAAa,aAAa,aAAa,cAAc,QAAQ,EAAE,eAAe,QAAQ,GAAG;IAG7F,IAAI,sBAAsB,aAAa;QACrC,eAAe,OAAO,GAAG;QACzB,eAAe,gBAAgB,GAAG;IACpC,OAAO;QACL,IAAI,YAAY,WAAW,eAAe,OAAO,GAAG,WAAW,MAAM,yBAAyB;QAC9F,IAAI,qBAAqB,WAAW,eAAe,gBAAgB,GAAG,mBAAmB,IAAI;IAC/F;IAGA,IAAI,OAAO,IAAI,CAAC,gBAAgB,MAAM,KAAK,GAAG;QAC5C,OAAO;IACT;IAEA,MAAM,aAAa,OAAO,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAA,MAAO,GAAG,IAAI,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IACnF,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC,CAAC,kBAAkB,EAAE,WAAW,oBAAoB,CAAC;IAE7E,KAAK,GAAG,CAAC;QAAE,GAAG,cAAc;QAAE;IAAQ;IAEtC,OAAO,MAAM,aAAa;AAC5B;AAEO,eAAe,uCAAa,GAAb,gBAAgB,OAAe;IACnD,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,MAAM,SAAS,KAAK,GAAG,CAAC,UAAU,iEAAiE;IAEnG,IAAI,OAAO,OAAO,GAAG,GAAG;QACtB,OAAO;YAAE,SAAS;YAAM,SAAS;QAAW;IAC9C;IACA,OAAO;QAAE,SAAS;QAAO,SAAS;IAAc;AAClD;AAEO,eAAe,uCAAO,GAAP,UAAU,MAAc,EAAE,OAAe,EAAE,UAAkB;IACjF,MAAM,QAAQ,MAAM,aAAa;IACjC,IAAI,CAAC,OAAO,OAAO;QAAE,SAAS;QAAO,SAAS;IAAS;IAEvD,MAAM,OAAO,MAAM,YAAY;IAC/B,IAAI,CAAC,MAAM,OAAO;QAAE,SAAS;QAAO,SAAS;IAAS;IACtD,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO;QAAE,SAAS;QAAO,SAAS;IAAkB;IAGxE,IAAI,MAAM,QAAQ,KAAK,eAAe,MAAM,KAAK,CAAC,WAAW,OAAO,WAAW,WAAW,IAAI;QAC3F,OAAO;YAAE,SAAS;YAAO,SAAS;QAAW;IAChD;IAEA,MAAM,sBAAsB,MAAM,qBAAqB;IACvD,IAAI,MAAM,gBAAgB,IAAI,oBAAoB,MAAM,IAAI,MAAM,gBAAgB,EAAE;QAClF,OAAO;YAAE,SAAS;YAAO,SAAS;QAAU;IAC9C;IACA,IAAI,oBAAoB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,SAAS;QAClD,MAAM,iBAAiB,MAAM,aAAa;QAC1C,OAAO;YAAE,SAAS;YAAM,SAAS;YAAY,OAAO;QAAe;IACrE;IAEA,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,KAAK,GAAG,CAAC,SAAS;IAElB,MAAM,aAAa,MAAM,aAAa;IACtC,OAAO;QAAE,SAAS;QAAM,SAAS;QAAW,OAAO;IAAW;AAChE;AAEO,eAAe,uCAAQ,GAAR,WAAW,MAAc,EAAE,OAAe;IAC9D,MAAM,QAAQ,MAAM,aAAa;IACjC,IAAI,CAAC,OAAO,OAAO;QAAE,SAAS;QAAO,SAAS;IAAS;IAEvD,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,MAAM,SAAS,KAAK,GAAG,CAAC,SAAS;IAEjC,IAAI,OAAO,OAAO,GAAG,GAAG;QACtB,MAAM,eAAe,MAAM,aAAa;QACxC,OAAO;YAAE,SAAS;YAAM,SAAS;YAAW,OAAO;QAAa;IAClE;IACA,OAAO;QAAE,SAAS;QAAO,SAAS;IAAmB;AACvD;AAEO,eAAe,uCAAS,GAAT,YAAY,MAAc,EAAE,OAAe;IAC/D,MAAM,QAAQ,MAAM,aAAa;IACjC,IAAI,CAAC,OAAO,OAAO;QAAE,SAAS;QAAO,SAAS;IAAS;IAEvD,MAAM,OAAO,MAAM,YAAY;IAC/B,IAAI,CAAC,MAAM,OAAO;QAAE,SAAS;QAAO,SAAS;IAAS;IACtD,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO;QAAE,SAAS;QAAO,SAAS;IAAgB;IAEtE,IAAI,CAAC,MAAM,gBAAgB,EAAE;QACzB,OAAO;YAAE,SAAS;YAAO,SAAS;QAAe;IACrD;IACA,IAAI,MAAM,QAAQ,KAAK,aAAa;QAChC,OAAO;YAAE,SAAS;YAAO,SAAS;QAAY;IAClD;IAEA,MAAM,eAAe,MAAM,qBAAqB;IAChD,MAAM,cAAc,aAAa,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;IAEpD,IAAI,CAAC,aAAa,OAAO;QAAE,SAAS;QAAO,SAAS;IAAa;IACjE,IAAI,YAAY,WAAW,EAAE,OAAO;QAAE,SAAS;QAAM,SAAS;IAAQ;IAEtE,MAAM,iBAAiB,CAAA,GAAA,wIAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,IAAI;IAC1C,MAAM,eAAe,MAAM,OAAO,GAAG,CAAA,GAAA,wIAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,OAAO,IAAI;IAC/D,MAAM,MAAM,IAAI;IAEhB,IAAI,aAAa;IACjB,IAAI,MAAM,QAAQ,KAAK,aAAa;QAClC,IAAI,cAAc;YAChB,aAAa,OAAO,kBAAkB,OAAO;QAC/C,OAAO;YACL,MAAM,gBAAgB,IAAI,KAAK,eAAe,WAAW,IAAI,eAAe,QAAQ,IAAI,eAAe,OAAO,IAAI,GAAG,GAAG;YACxH,MAAM,cAAc,IAAI,KAAK,eAAe,WAAW,IAAI,eAAe,QAAQ,IAAI,eAAe,OAAO,IAAI,IAAI,IAAI,IAAI;YAC5H,aAAa,OAAO,iBAAiB,OAAO;QAC9C;IACF;IAEA,IAAI,CAAC,YAAY;QACf,OAAO;YAAE,SAAS;YAAO,SAAS;QAAkB;IACtD;IAEA,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,KAAK,GAAG,CAAC,SAAS;IAClB,OAAO;QAAE,SAAS;QAAM,SAAS;IAAQ;AAC3C;AAGO,eAAe,uCAAc,GAAd;IACpB,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,MAAM,gBAAgB,KAAK,GAAG;IAC9B,OAAO,cAAc,GAAG,CAAC,CAAA,MAAO,CAAC;YAAC,GAAG,GAAG;YAAE,MAAM,IAAI,IAAI,IAAI,IAAI,OAAO,WAAW;QAAE,CAAC;AACvF;AAGO,eAAe,uCAAsB,GAAtB,yBAAyB,MAAc;IAC3D,MAAM,OAAO,gHAAA,CAAA,UAAE,CAAC,OAAO,CAAC;IACxB,MAAM,YAAY,KAAK,GAAG,CAAC;IAE3B,MAAM,SAAkB,EAAE;IAC1B,KAAK,MAAM,YAAY,UAAW;QAChC,MAAM,eAAe,MAAM,qBAAqB,SAAS,EAAE;QAC3D,OAAO,IAAI,CAAC;YAAE,GAAG,QAAQ;YAAE;YAAc,kBAAkB,CAAC,CAAC,SAAS,gBAAgB;QAAC;IACzF;IACA,OAAO;AACT;;;IA1VsB;IAKA;IAKA;IAKA;IAMA;IAuBA;IA8BA;IA8BA;IAYA;IAUA;IAkBA;IAUA;IA8BA;IA8CA;IAUA;IA6BA;IAcA;IA8CA;IAOA;;AAhVA,+OAAA;AAKA,+OAAA;AAKA,+OAAA;AAKA,+OAAA;AAMA,+OAAA;AAuBA,+OAAA;AA8BA,+OAAA;AA8BA,+OAAA;AAYA,+OAAA;AAUA,+OAAA;AAkBA,+OAAA;AAUA,+OAAA;AA8BA,+OAAA;AA8CA,+OAAA;AAUA,+OAAA;AA6BA,+OAAA;AAcA,+OAAA;AA8CA,+OAAA;AAOA,+OAAA","debugId":null}},
    {"offset": {"line": 895, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/namemc.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Mocks a check to NameMC to see if a username is valid.\n */\n\n/**\n * Mocks a check to NameMC to see if a username is valid.\n * In a real application, this would involve an API call to NameMC.\n * @param username The Minecraft username to check.\n * @returns Promise<boolean> True if the username is considered valid, false otherwise.\n */\nexport async function checkNameMC(username: string): Promise<boolean> {\n  console.log(`Pretending to check NameMC for username: ${username}`);\n  // In a real scenario:\n  // try {\n  //   // Example: const response = await fetch(`https://api.namemc.com/profile/${username}/uuid`);\n  //   // return response.ok;\n  // } catch (error) {\n  //   console.error(\"NameMC check failed:\", error);\n  //   return false;\n  // }\n\n  // For testing the \"invalid\" path in the login flow\n  if (username.toLowerCase() === \"invalid_player_for_testing\") {\n    console.log(`Mock: Username \"${username}\" is considered invalid by NameMC.`);\n    return false;\n  }\n\n  // Mock: assume most usernames are valid for now\n  console.log(`Mock: Username \"${username}\" is considered valid by NameMC.`);\n  return true;\n}\n"],"names":[],"mappings":";;;;;;;;AAaO,eAAe,uCAAS,GAAT,YAAY,QAAgB;IAChD,QAAQ,GAAG,CAAC,CAAC,yCAAyC,EAAE,UAAU;IAClE,sBAAsB;IACtB,QAAQ;IACR,iGAAiG;IACjG,2BAA2B;IAC3B,oBAAoB;IACpB,kDAAkD;IAClD,kBAAkB;IAClB,IAAI;IAEJ,mDAAmD;IACnD,IAAI,SAAS,WAAW,OAAO,8BAA8B;QAC3D,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,SAAS,kCAAkC,CAAC;QAC3E,OAAO;IACT;IAEA,gDAAgD;IAChD,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,SAAS,gCAAgC,CAAC;IACzE,OAAO;AACT;;;IApBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 933, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { z } from 'zod';\nimport crypto from 'crypto';\nimport {\n  createEvent as apiCreateEvent,\n  joinEvent as apiJoinEvent,\n  leaveEvent as apiLeaveEvent,\n  checkInUser as apiCheckInUser,\n  getUserById,\n  getUserByUsername,\n  getUserByQQNumber, // Added for QQ uniqueness check\n  getEventById,\n  getEvents as apiGetEvents,\n  createUser as apiCreateUser,\n  getEventByCdKey,\n  getAnnouncements as apiGetAnnouncements,\n  deleteEventById as apiDeleteEventById,\n  updateEventById as apiUpdateEventById,\n  getUsers as apiGetUsers,\n  updateUserById as apiUpdateUserById,\n  deleteUserById as apiDeleteUserById,\n  getEventsForUser,\n} from './data';\nimport type { Event, User, Announcement, AdminAddUserFormState, AdminUpdateUserFormState, ServerAuthFormState } from './types';\nimport { checkNameMC } from './namemc';\n\n\nconst MAX_AGE = 60 * 60 * 24 * 30; // 30 days\n\n// --- Authentication ---\nconst MinecraftUsernameSchema = z.string()\n  .min(3, \"Minecraft 用户名长度必须在 3 到 16 个字符之间。\")\n  .max(16, \"Minecraft 用户名长度必须在 3 到 16 个字符之间。\")\n  .regex(/^[a-zA-Z0-9_]+$/, \"Minecraft 用户名只能包含字母、数字和下划线。\")\n  .refine(username => !username.startsWith('_') && !username.endsWith('_'), {\n    message: \"Minecraft 用户名不能以下划线开头或结尾。\",\n  });\n\nconst QQNumberSchema = z.string()\n  .min(5, \"QQ号至少为5位数字。\")\n  .max(15, \"QQ号最多为15位数字。\")\n  .regex(/^\\d+$/, \"QQ号必须为纯数字。\");\n\n\nconst AuthBaseSchema = z.object({\n  minecraftUsername: MinecraftUsernameSchema,\n  password: z.string().min(6, \"密码至少需要6个字符。\"),\n  authMode: z.enum(['login', 'register']),\n});\n\n// Using discriminated union for different fields in login vs register\nconst AuthFormSchema = z.discriminatedUnion(\"authMode\", [\n  AuthBaseSchema.extend({ authMode: z.literal(\"login\") }),\n  AuthBaseSchema.extend({\n    authMode: z.literal(\"register\"),\n    confirmPassword: z.string(),\n    qqNumber: QQNumberSchema, // QQ number is required for registration\n  }),\n]).refine(\n  (data) => {\n    if (data.authMode === \"register\") {\n      return data.password === data.confirmPassword;\n    }\n    return true;\n  },\n  {\n    message: \"两次输入的密码不匹配。\",\n    path: [\"confirmPassword\"], // This path might need adjustment for discriminated union in Zod error formatting\n  }\n);\n\n\nexport async function authenticateUserAction(prevState: ServerAuthFormState, formData: FormData): Promise<ServerAuthFormState> {\n  console.log(\"authenticateUserAction: Received formData entries:\");\n  for (const [key, value] of formData.entries()) {\n    console.log(`  ${key}: ${value}`);\n  }\n  \n  try {\n    const rawFormData = Object.fromEntries(formData.entries());\n    const validatedFields = AuthFormSchema.safeParse(rawFormData);\n\n    if (!validatedFields.success) {\n      console.error(\"authenticateUserAction: Zod validation failed:\", validatedFields.error.flatten().fieldErrors);\n      return {\n        message: '输入无效。请检查您填写的信息。',\n        errors: validatedFields.error.flatten().fieldErrors,\n        success: false,\n      };\n    }\n    \n    const { minecraftUsername, password, authMode } = validatedFields.data;\n    let sessionUserIdToSet: string | undefined = undefined;\n    let successMessage: string = '';\n\n    if (authMode === 'login') {\n      console.log(`authenticateUserAction: Attempting login for user \"${minecraftUsername}\"`);\n      const user = await getUserByUsername(minecraftUsername); // Case-insensitive for lookup\n      if (!user) {\n        console.warn(`authenticateUserAction: Login failed - user \"${minecraftUsername}\" not found.`);\n        return { message: '用户不存在或密码错误。', errors: { form: ['用户不存在或密码错误。'] }, success: false };\n      }\n      // IMPORTANT: Password comparison should be case-sensitive if usernames are stored with case.\n      // Assuming usernames are stored as entered, but lookups can be case-insensitive.\n      // For prototype, direct password comparison.\n      if (user.username !== minecraftUsername || !user.password || user.password !== password) { \n        console.warn(`authenticateUserAction: Login failed - incorrect username case or password for user \"${minecraftUsername}\". DB User: ${user.username}`);\n        return { message: '用户不存在或密码错误。', errors: { form: ['用户不存在或密码错误。'] }, success: false };\n      }\n      console.log(`authenticateUserAction: Login successful for user \"${user.username}\" (ID: ${user.id}).`);\n      sessionUserIdToSet = user.id;\n      successMessage = '登录成功！即将跳转...';\n      \n    } else if (authMode === 'register') { // authMode is 'register'\n      console.log(`authenticateUserAction: Attempting registration for user \"${minecraftUsername}\"`);\n      const { qqNumber } = validatedFields.data; // qqNumber is only present in the register variant\n\n      if (validatedFields.data.password !== validatedFields.data.confirmPassword) {\n         console.warn(`authenticateUserAction: Registration failed - passwords do not match for \"${minecraftUsername}\".`);\n        return { message: \"两次输入的密码不匹配。\", errors: { confirmPassword: [\"两次输入的密码不匹配。\"] }, success: false };\n      }\n\n      const isNameMCValid = await checkNameMC(minecraftUsername);\n      if (!isNameMCValid) {\n        console.warn(`authenticateUserAction: Registration failed - NameMC validation failed for \"${minecraftUsername}\".`);\n        return { message: '此 Minecraft 用户名在 NameMC 上无效或无法验证。', errors: { minecraftUsername: ['此 Minecraft 用户名在 NameMC 上无效或无法验证。'] }, success: false };\n      }\n      console.log(`authenticateUserAction: NameMC validation successful for \"${minecraftUsername}\".`);\n\n      const existingUserByUsername = await getUserByUsername(minecraftUsername);\n      if (existingUserByUsername) {\n        console.warn(`authenticateUserAction: Registration failed - username \"${minecraftUsername}\" already exists.`);\n        return { message: '此 Minecraft 用户名已被注册。', errors: { minecraftUsername: ['此 Minecraft 用户名已被注册。'] }, success: false };\n      }\n      console.log(`authenticateUserAction: Username \"${minecraftUsername}\" is available.`);\n      \n      const existingUserByQQ = await getUserByQQNumber(qqNumber);\n      if (existingUserByQQ) {\n        console.warn(`authenticateUserAction: Registration failed - QQ number \"${qqNumber}\" already associated with user ${existingUserByQQ.username}.`);\n        return { message: '此 QQ 号码已被其他用户绑定。', errors: { qqNumber: ['此 QQ 号码已被其他用户绑定。'] }, success: false };\n      }\n      console.log(`authenticateUserAction: QQ number \"${qqNumber}\" is available.`);\n      \n      let newUser: User | null = null;\n      try {\n        newUser = await apiCreateUser({ \n          id: minecraftUsername, // Using username as ID for new users\n          username: minecraftUsername,\n          password: password, \n          qqNumber: qqNumber,\n          op: 0, \n          avatarUrl: `https://placehold.co/100x100.png?text=${minecraftUsername.substring(0,2).toUpperCase()}`\n        });\n        console.log(`authenticateUserAction: User \"${minecraftUsername}\" created successfully (ID: ${newUser?.id}).`);\n      } catch (error: any) {\n        console.error(\"authenticateUserAction - Registration - apiCreateUser failed:\", error);\n        return { message: `创建用户时出错: ${error.message || '未知数据库错误'}`, errors: { form: [`创建用户时出错: ${error.message || '未知数据库错误'}`] }, success: false };\n      }\n\n      if (!newUser || !newUser.id) {\n         console.error(\"authenticateUserAction: Registration failed - newUser object or ID is null after creation.\");\n         return { message: '创建用户后未能获取用户信息。', errors: { form: ['创建用户后未能获取用户信息。'] }, success: false };\n      }\n      console.log(`authenticateUserAction: Registration successful for user \"${newUser.username}\" (ID: ${newUser.id}).`);\n      sessionUserIdToSet = newUser.id;\n      successMessage = '账户创建成功！即将跳转...';\n    }\n\n    if (sessionUserIdToSet) {\n      cookies().set('userId', sessionUserIdToSet, { \n        httpOnly: true, \n        secure: process.env.NODE_ENV === 'production', \n        maxAge: MAX_AGE, \n        path: '/', \n        sameSite: 'lax' \n      });\n      console.log(`authenticateUserAction: Cookie set for user ${sessionUserIdToSet}. Redirecting to /dashboard. Message: ${successMessage}`);\n      // Important: Return success state *before* redirect to allow client to show toast\n      // This is tricky with server actions and redirects.\n      // The redirect() call will throw an error that Next.js uses to perform the navigation.\n      // The state update might not be fully processed by useActionState before the redirect occurs.\n      // A common pattern for \"flash messages\" post-redirect is to use query parameters or a temporary session store.\n      // For simplicity now, we rely on the client to show the toast *after* navigation if state.success is true.\n      // However, for immediate toast *before* redirect, it's better handled purely client-side after the action promise resolves.\n      // Let's return the success state and let the client handle the toast *and* redirect.\n      // This is a change from previous direct redirect.\n      return { success: true, message: successMessage, userId: sessionUserIdToSet };\n    } else {\n      console.error(\"authenticateUserAction: sessionUserIdToSet was not defined after auth logic.\");\n      return { message: '认证过程出现意外，未能设置用户会话。', success: false, errors: {form: ['认证过程出现意外，未能设置用户会话。']} };\n    }\n\n  } catch (error: any) {\n    if (error && typeof error === 'object' && 'digest' in error && typeof error.digest === 'string' && error.digest.startsWith('NEXT_REDIRECT')) {\n      console.log(\"authenticateUserAction: Redirecting (caught and re-throwing)...\");\n      throw error; \n    }\n    console.error(\"authenticateUserAction - Top-level Server Error:\", error);\n    const errorMessage = error instanceof Error ? error.message : '认证过程中发生服务器内部错误。';\n    return { message: `服务器错误: ${errorMessage} 请稍后再试。`, success: false, errors: { form: [`服务器错误: ${errorMessage} 请稍后再试。`]} };\n  }\n}\n\n\nexport async function logout() {\n  cookies().delete('userId');\n  redirect('/login');\n}\n\nexport async function getSessionUser(): Promise<User | null> {\n  const userId = cookies().get('userId')?.value;\n  if (!userId) return null;\n  try {\n    console.log(`getSessionUser: Attempting to get user by ID: ${userId}`);\n    const user = await getUserById(userId); \n    if (!user) {\n        console.warn(`getSessionUser: No user found for ID: ${userId}. Deleting cookie.`);\n        cookies().delete('userId'); \n        return null;\n    }\n    console.log(`getSessionUser: User found: ${user.username}`);\n    return user;\n  } catch (error) {\n    console.error(\"getSessionUser - Error fetching user:\", error);\n    return null;\n  }\n}\n\n// --- Event Actions ---\nconst CreateEventSchema = z.object({\n  name: z.string().min(3, \"活动名称至少需要3个字符。\"),\n  date: z.string().refine((date) => !isNaN(Date.parse(date)), \"无效的日期格式。\"),\n  description: z.string().min(10, \"描述至少需要10个字符。\"),\n  participantLimit: z.preprocess(\n    (val) => (val === \"\" || val === null || val === undefined ? undefined : Number(val)),\n    z.number().int().positive().optional().nullable()\n  ),\n  cdKey: z.string().min(4, \"活动代码至少需要4个字符。\").max(20, \"活动代码最多20个字符。\"),\n  imageUrl: z.string().url(\"无效的图片链接。\").optional().or(z.literal('')),\n  userPassword: z.string().min(1, \"您的账户密码不能为空。\")\n});\n\nexport async function createEventAction(prevState: any, formData: FormData) {\n  try {\n    const rawFormData = Object.fromEntries(formData.entries());\n    const validatedFields = CreateEventSchema.safeParse(rawFormData);\n\n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: '创建活动失败。请检查所填字段。',\n        success: false,\n      };\n    }\n\n    const user = await getSessionUser();\n    if (!user) {\n      return { message: '需要认证才能创建活动。请先登录。', errors: { form: ['请先登录。'] }, success: false };\n    }\n    if (user.op !== 1) {\n      return { message: '您没有创建活动的权限。', errors: { form: ['权限不足。'] }, success: false };\n    }\n\n    if (!user.password || user.password !== validatedFields.data.userPassword) {\n      return {\n        errors: { ...(validatedFields.error?.flatten().fieldErrors || {}), userPassword: ['您的账户密码不正确。'] },\n        message: '创建活动失败。账户密码验证失败。',\n        success: false,\n      };\n    }\n\n    const { userPassword, ...eventDataForApi } = validatedFields.data;\n    const newEvent = await apiCreateEvent( \n        eventDataForApi as Omit<Event, 'id' | 'participants' | 'organizerId'>,\n        user.id\n    );\n    \n    if (newEvent?.id) {\n      redirect(`/events/${newEvent.id}`);\n    } else {\n      return { message: '创建活动后未能获取活动ID。', errors: { form: ['创建活动后未能获取活动ID。'] }, success: false };\n    }\n  } catch (error: any) {\n    if (error && typeof error === 'object' && 'digest' in error && typeof error.digest === 'string' && error.digest.startsWith('NEXT_REDIRECT')) {\n      throw error;\n    }\n    console.error(\"Create Event Action - Server Error:\", error);\n    return { message: '创建活动时发生意外的服务器错误。', errors: { form: ['创建活动时发生意外的服务器错误。'] }, success: false };\n  }\n}\n\nconst UpdateEventSchema = CreateEventSchema.extend({\n  eventId: z.string().min(1, \"Event ID is required.\"),\n});\n\nexport async function updateEventAction(prevState: any, formData: FormData) {\n  try {\n    const rawFormData = Object.fromEntries(formData.entries());\n    const validatedFields = UpdateEventSchema.safeParse(rawFormData);\n\n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: '更新活动失败。请检查所填字段。',\n        success: false,\n      };\n    }\n\n    const user = await getSessionUser();\n    if (!user) {\n      return { message: '需要认证才能更新活动。请先登录。', errors: { form: ['请先登录。'] }, success: false };\n    }\n    if (user.op !== 1) {\n      return { message: '您没有更新活动的权限。', errors: { form: ['权限不足。'] }, success: false };\n    }\n    if (!user.password || user.password !== validatedFields.data.userPassword) {\n      return {\n        errors: { ...(validatedFields.error?.flatten().fieldErrors || {}), userPassword: ['您的账户密码不正确。'] },\n        message: '更新活动失败。账户密码验证失败。',\n        success: false,\n      };\n    }\n\n    const { userPassword, eventId, ...eventDataToUpdate } = validatedFields.data;\n    const updatedEvent = await apiUpdateEventById(eventId, eventDataToUpdate as Partial<Omit<Event, 'id' | 'participants' | 'organizerId'>>);\n    \n    if (!updatedEvent) {\n      return { message: '更新活动失败，活动未找到或没有更改。', errors: { eventId: ['活动未找到或没有进行任何更改。'] }, success: false };\n    }\n    redirect(`/events/${validatedFields.data.eventId}`);\n\n  } catch (error: any) {\n     if (error && typeof error === 'object' && 'digest' in error && typeof error.digest === 'string' && error.digest.startsWith('NEXT_REDIRECT')) {\n      throw error;\n    }\n    console.error(\"Update Event Action - Server Error:\", error);\n    return { message: '更新活动时发生意外的服务器错误。', errors: { form: ['更新活动时发生意外的服务器错误。'] }, success: false };\n  }\n}\n\n\nexport async function deleteEventAction(eventId: string, adminPassword: string): Promise<{ success: boolean, message: string }> {\n  const user = await getSessionUser();\n  if (!user) {\n    return { success: false, message: '需要认证才能删除活动。请先登录。' };\n  }\n  if (user.op !== 1) {\n    return { success: false, message: '您没有删除活动的权限。' };\n  }\n  if (!user.password || user.password !== adminPassword) {\n    return { success: false, message: '您的账户密码不正确，无法删除活动。' };\n  }\n\n  try {\n    const result = await apiDeleteEventById(eventId); \n    return result;\n  } catch (error) {\n    console.error(\"删除活动错误:\", error);\n    return { success: false, message: '在服务器上删除活动失败。请稍后重试。' };\n  }\n}\n\n\nexport async function joinEventAction(eventId: string, cdKeyInput: string) {\n  const user = await getSessionUser();\n  if (!user) {\n    return { success: false, message: '您必须登录才能加入活动。' };\n  }\n  try {\n    const result = await apiJoinEvent(user.id, eventId, cdKeyInput); \n    return result;\n  } catch (error) {\n    console.error(\"加入活动错误:\", error);\n    return { success: false, message: '加入活动时发生服务器错误。' };\n  }\n}\n\nexport async function joinEventUsingCdKeyOnlyAction(cdKey: string): Promise<{ success: boolean, message: string, event?: Event }> {\n  const user = await getSessionUser();\n  if (!user) {\n    return { success: false, message: '您必须登录才能加入活动。' };\n  }\n\n  if (!cdKey || cdKey.trim() === '') {\n    return { success: false, message: '请输入有效的活动代码。' };\n  }\n\n  const eventToJoin = await getEventByCdKey(cdKey); \n  if (!eventToJoin) {\n    return { success: false, message: '具有此活动代码的活动未找到。' };\n  }\n\n  try {\n    const result = await apiJoinEvent(user.id, eventToJoin.id, cdKey); \n    return result;\n  } catch (error) {\n    console.error(\"使用活动代码加入活动错误:\", error);\n    return { success: false, message: '使用活动代码加入活动时发生服务器错误。' };\n  }\n}\n\n\nexport async function leaveEventAction(eventId: string) {\n  const user = await getSessionUser();\n  if (!user) {\n    return { success: false, message: '您必须登录才能离开活动。' };\n  }\n  try {\n    const result = await apiLeaveEvent(user.id, eventId); \n    return result;\n  } catch (error) {\n    console.error(\"离开活动错误:\", error);\n    return { success: false, message: '离开活动时发生服务器错误。' };\n  }\n}\n\nexport async function checkInAction(eventId: string) {\n  const user = await getSessionUser();\n  if (!user) {\n    return { success: false, message: '您必须登录才能签到。' };\n  }\n  try {\n    const result = await apiCheckInUser(user.id, eventId); \n    return result;\n  } catch (error) {\n    console.error(\"签到错误:\", error);\n    return { success: false, message: '签到过程中发生服务器错误。' };\n  }\n}\n\nexport async function getEventDetailsAction(eventId: string): Promise<Event | null> {\n  try {\n    const event = await getEventById(eventId); \n    return event || null;\n  } catch (error) {\n    console.error(\"获取活动详情错误 (action):\", error);\n    return null;\n  }\n}\n\nexport async function getEventsAction(): Promise<Event[]> {\n  try {\n    return await apiGetEvents(); \n  } catch (error) {\n    console.error(\"获取所有活动失败 (action):\", error);\n    return [];\n  }\n}\n\nexport async function getUserProfile(userId: string): Promise<{ user: User; joinedEvents: Event[] } | null> {\n  const user = await getUserById(userId);\n  if (!user) {\n    console.warn(`用户个人资料未找到: ${userId}`);\n    return null;\n  }\n  const joinedEvents = await getEventsForUser(userId);\n  return { user, joinedEvents };\n}\n\nexport async function getAnnouncementsAction(): Promise<Announcement[]> {\n  try {\n    return await apiGetAnnouncements(); \n  } catch (error) {\n    console.error(\"获取公告失败 (action):\", error);\n    return [];\n  }\n}\n\n// --- User Management Actions (Admin Only) ---\nexport async function getUsersAction(): Promise<User[]> {\n  const currentUser = await getSessionUser();\n  if (!currentUser || currentUser.op !== 1) {\n    console.warn(\"非管理员尝试获取用户列表。\");\n    return [];\n  }\n  return apiGetUsers();\n}\n\nconst AdminAddUserFormSchema = z.object({\n  minecraftUsername: MinecraftUsernameSchema,\n  avatarUrl: z.string().url(\"无效的头像链接。\").optional().or(z.literal('')),\n  op: z.enum(['0', '1']).transform(Number),\n  password: z.string().min(6, \"密码至少需要6个字符。\"),\n  confirmPassword: z.string(),\n  adminConfirmPassword: z.string().min(1, \"需要您的密码来确认此操作。\")\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"两次输入的密码不匹配。\",\n  path: [\"confirmPassword\"],\n});\n\n\nexport async function adminAddUserAction(prevState: AdminAddUserFormState, formData: FormData): Promise<AdminAddUserFormState> {\n  try {\n    const performingUser = await getSessionUser();\n    if (!performingUser || performingUser.op !== 1) {\n      return { message: \"您没有权限执行此操作。\", success: false, errors: { form: [\"权限不足。\"] } };\n    }\n\n    const rawFormData = Object.fromEntries(formData.entries());\n    const validatedFields = AdminAddUserFormSchema.safeParse(rawFormData);\n\n    if (!validatedFields.success) {\n      return {\n        message: '输入无效。请检查您填写的信息。',\n        errors: validatedFields.error.flatten().fieldErrors,\n        success: false,\n      };\n    }\n\n    const { minecraftUsername, avatarUrl, op, password, adminConfirmPassword } = validatedFields.data;\n\n    if (performingUser.password !== adminConfirmPassword) { // Plaintext comparison for prototype\n        return { message: '您的账户密码不正确，无法授权此操作。', errors: { adminConfirmPassword: ['管理员密码不正确。'] }, success: false };\n    }\n    \n    const isNameMCValid = await checkNameMC(minecraftUsername);\n    if (!isNameMCValid) {\n      return { message: '此 Minecraft 用户名在 NameMC 上无效或无法验证。', errors: { minecraftUsername: ['此 Minecraft 用户名在 NameMC 上无效或无法验证。'] }, success: false };\n    }\n\n    const existingUser = await getUserByUsername(minecraftUsername);\n    if (existingUser) {\n      return { message: '此 Minecraft 用户名已被注册。', errors: { minecraftUsername: ['此 Minecraft 用户名已被注册。'] }, success: false };\n    }\n\n    await apiCreateUser({\n      id: minecraftUsername,\n      username: minecraftUsername,\n      avatarUrl: avatarUrl || `https://placehold.co/100x100.png?text=${minecraftUsername.substring(0,2).toUpperCase()}`,\n      op: op,\n      password: password, \n      // qqNumber will be undefined here, DB will set to NULL if column exists\n    });\n\n    return { message: `用户 ${minecraftUsername} 已成功创建。`, success: true };\n\n  } catch (error: any) {\n    console.error(\"Admin Add User Action - Server Error:\", error);\n    return { message: '创建用户时发生服务器内部错误。', success: false, errors: { form: ['创建用户时发生服务器内部错误。'] } };\n  }\n}\n\n\nconst AdminUpdateUserFormSchema = z.object({\n  userIdToUpdate: z.string().min(1, \"用户ID是必需的。\"),\n  minecraftUsername: MinecraftUsernameSchema,\n  avatarUrl: z.string().url(\"无效的头像链接。\").optional().or(z.literal('')),\n  op: z.enum(['0', '1']).transform(Number),\n  newPassword: z.string().min(6, \"新密码至少需要6个字符。\").optional().or(z.literal('')),\n  confirmNewPassword: z.string().optional().or(z.literal('')),\n  adminConfirmPassword: z.string().min(1, \"需要您的密码来确认更改。\") \n}).refine(data => {\n  if (data.newPassword && data.newPassword !== data.confirmNewPassword) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"两次输入的新密码不匹配。\",\n  path: [\"confirmNewPassword\"],\n});\n\n\nexport async function adminUpdateUserAction(prevState: AdminUpdateUserFormState, formData: FormData): Promise<AdminUpdateUserFormState> {\n   try {\n    const performingUser = await getSessionUser();\n    if (!performingUser || performingUser.op !== 1) {\n      return { message: \"您没有权限执行此操作。\", success: false, errors: { form: [\"权限不足。\"] } };\n    }\n\n    const rawFormData = Object.fromEntries(formData.entries());\n    const validatedFields = AdminUpdateUserFormSchema.safeParse(rawFormData);\n\n    if (!validatedFields.success) {\n      return {\n        message: '输入无效。请检查您填写的信息。',\n        errors: validatedFields.error.flatten().fieldErrors,\n        success: false,\n      };\n    }\n    \n    const { userIdToUpdate, minecraftUsername, avatarUrl, op, newPassword, adminConfirmPassword } = validatedFields.data;\n\n    if (performingUser.password !== adminConfirmPassword) { // Plaintext comparison for prototype\n        return { message: '您的账户密码不正确，无法授权此更改。', errors: { adminConfirmPassword: ['管理员密码不正确。'] }, success: false };\n    }\n\n    const userToUpdate = await getUserById(userIdToUpdate);\n    if (!userToUpdate) {\n      return { message: '要更新的用户未找到。', errors: { userIdToUpdate: ['用户未找到。'] }, success: false };\n    }\n    \n    if (minecraftUsername.toLowerCase() !== userToUpdate.username.toLowerCase()) {\n      const existingUserWithNewName = await getUserByUsername(minecraftUsername);\n      if (existingUserWithNewName && existingUserWithNewName.id !== userIdToUpdate) {\n        return { message: '此 Minecraft 用户名已被其他用户注册。', errors: { minecraftUsername: ['此 Minecraft 用户名已被其他用户注册。'] }, success: false };\n      }\n      const isNameMCValid = await checkNameMC(minecraftUsername);\n      if (!isNameMCValid) {\n        return { message: '新的 Minecraft 用户名在 NameMC 上无效或无法验证。', errors: { minecraftUsername: ['新的 Minecraft 用户名在 NameMC 上无效或无法验证。'] }, success: false };\n      }\n    }\n    \n    const updateData: Partial<User> = {\n      username: minecraftUsername,\n      avatarUrl: avatarUrl || userToUpdate.avatarUrl,\n      op: op,\n      // qqNumber could be added here if admin should be able to edit it\n    };\n\n    if (newPassword) {\n      updateData.password = newPassword; \n    }\n\n    await apiUpdateUserById(userIdToUpdate, updateData);\n\n    return { message: `用户 ${minecraftUsername} (ID: ${userIdToUpdate}) 已成功更新。`, success: true };\n\n  } catch (error: any) {\n    console.error(\"Admin Update User Action - Server Error:\", error);\n    return { message: '更新用户时发生服务器内部错误。', success: false, errors: { form: ['更新用户时发生服务器内部错误。'] } };\n  }\n}\n\nexport async function adminDeleteUserAction(userIdToDelete: string, adminConfirmPassword: string): Promise<{ success: boolean; message: string }> {\n  const performingUser = await getSessionUser();\n  if (!performingUser || performingUser.op !== 1) {\n    return { success: false, message: \"您没有权限执行此操作。\" };\n  }\n  if (performingUser.id === userIdToDelete) {\n    return { success: false, message: \"您不能删除自己的账户。\" };\n  }\n  if (performingUser.password !== adminConfirmPassword) { // Plaintext comparison\n    return { success: false, message: \"您的账户密码不正确，无法授权删除操作。\" };\n  }\n\n  try {\n    const result = await apiDeleteUserById(userIdToDelete);\n    return result;\n  } catch (error) {\n    console.error(\"Admin Delete User Action - Server Error:\", error);\n    const errorMessage = error instanceof Error ? error.message : \"删除用户时发生服务器内部错误。\";\n    return { success: false, message: errorMessage };\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1855, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1963, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28auth%29/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","debugId":null}},
    {"offset": {"line": 1977, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28auth%29/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","debugId":null}},
    {"offset": {"line": 1991, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}