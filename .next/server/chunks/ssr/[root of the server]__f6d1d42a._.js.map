{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/default-data.ts"],"sourcesContent":["\n// src/lib/default-data.ts\nimport type { User, Event, Announcement } from './types';\n\nexport const defaultUsers: User[] = [\n    { id: 'Steve', username: 'Steve', avatarUrl: `https://placehold.co/100x100.png?text=St`, op: 0, password: '123456' },\n    { id: 'Alex', username: 'Alex', avatarUrl: `https://placehold.co/100x100.png?text=Al`, op: 0, password: '123456' },\n    { id: 'Notch', username: 'Notch', avatarUrl: `https://placehold.co/100x100.png?text=No`, op: 1, password: '123456' },\n    { id: 'dream_pep_id', username: 'dream_pep', avatarUrl: `https://placehold.co/100x100.png?text=dr`, op: 1, password: '123456' }\n];\n\nexport const defaultEvents: Event[] = [\n    {\n        id: 'event1', name: '生存游戏锦标赛', date: '2024-07-29T12:00:00.000Z',\n        description: \"\\n### 欢迎参加年度生存游戏！\\n证明你的勇气，成为最后的幸存者。\\n**规则：**\\n- 禁止作弊\\n- 联盟是暂时的\\n- 玩得开心！\\n**奖品：**\\n- 第一名：钻石奖杯\\n- 第二名：金锭\\n- 第三名：铁制工具\\n\",\n        participantLimit: 24,\n        participants: [ // These will be used to seed event_participants\n             { id: 'Steve', username: 'Steve', avatarUrl: `https://placehold.co/100x100.png?text=St`, isCheckedIn: false, op: 0, password: '123456' },\n             { id: 'dream_pep_id', username: 'dream_pep', avatarUrl: `https://placehold.co/100x100.png?text=dr`, isCheckedIn: false, op: 1, password: '123456' }\n        ],\n        cdKey: 'SURVIVAL2024', imageUrl: `https://placehold.co/800x400.png`, organizerId: 'Notch',\n    },\n    {\n        id: 'event2', name: '创意建筑大赛', date: '2024-07-22T12:00:00.000Z',\n        description: \"\\n## 展示你的建筑技巧！\\n主题：**中世纪城堡**\\n在时限内建造最令人印象深刻的城堡。\\n评分标准：\\n- 创意\\n- 细节\\n- 规模\\n\",\n        participantLimit: 50,\n        participants: [\n            { id: 'Steve', username: 'Steve', avatarUrl: `https://placehold.co/100x100.png?text=St`, isCheckedIn: true, op: 0, password: '123456' },\n            { id: 'Alex', username: 'Alex', avatarUrl: `https://placehold.co/100x100.png?text=Al`, isCheckedIn: false, op: 0, password: '123456' },\n        ],\n        cdKey: 'BUILDMC2024', imageUrl: `https://placehold.co/800x400.png`, organizerId: 'Notch',\n    },\n    {\n        id: 'event3', name: '跑酷挑战赛', date: '2024-07-08T12:00:00.000Z',\n        description: '在我们迄今为止最难的跑酷地图中测试你的敏捷性。完成即可获得奖励！',\n        participants: [ { id: 'dream_pep_id', username: 'dream_pep', avatarUrl: `https://placehold.co/100x100.png?text=dr`, isCheckedIn: true, op: 1, password: '123456' } ],\n        cdKey: 'PARKOURX', imageUrl: `https://placehold.co/800x400.png`, organizerId: 'Notch',\n    },\n     {\n        id: 'event4', name: '红石装置展览会', date: '2024-08-21T12:00:00.000Z',\n        description: '展示你最巧妙的红石发明。创新是关键！', participantLimit: 10, participants: [],\n        cdKey: 'REDSTONEFAI', imageUrl: `https://placehold.co/800x400.png`, organizerId: 'Notch',\n    },\n    {\n        id: 'event_1747228478227_2n7f2', name: '测试活动', date: '2025-05-16T21:14',\n        description: '这是个测试活动将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通将菜单改为侧边栏与仪表盘的数据面盘打通',\n        participantLimit: 50, cdKey: 'Beta1', imageUrl: '',\n        participants: [{id: 'dream_pep_id', username: 'dream_pep', avatarUrl: 'https://placehold.co/100x100.png?text=dr', isCheckedIn: false, op: 1, password: \"123456\"}],\n        organizerId: 'dream_pep_id'\n    }\n];\n\nexport const defaultAnnouncements: Announcement[] = [\n  { id: 'announce1', title: '欢迎来到 MineVent!', content: '发现、加入并创建精彩的《我的世界》活动。祝您玩得愉快！', date: new Date().toISOString() },\n  { id: 'announce2', title: '新功能：仪表盘公告', content: '现在您可以在仪表盘查阅最新公告了。', date: new Date(Date.now() - 86400000).toISOString() },\n];\n"],"names":[],"mappings":"AACA,0BAA0B;;;;;;AAGnB,MAAM,eAAuB;IAChC;QAAE,IAAI;QAAS,UAAU;QAAS,WAAW,CAAC,wCAAwC,CAAC;QAAE,IAAI;QAAG,UAAU;IAAS;IACnH;QAAE,IAAI;QAAQ,UAAU;QAAQ,WAAW,CAAC,wCAAwC,CAAC;QAAE,IAAI;QAAG,UAAU;IAAS;IACjH;QAAE,IAAI;QAAS,UAAU;QAAS,WAAW,CAAC,wCAAwC,CAAC;QAAE,IAAI;QAAG,UAAU;IAAS;IACnH;QAAE,IAAI;QAAgB,UAAU;QAAa,WAAW,CAAC,wCAAwC,CAAC;QAAE,IAAI;QAAG,UAAU;IAAS;CACjI;AAEM,MAAM,gBAAyB;IAClC;QACI,IAAI;QAAU,MAAM;QAAW,MAAM;QACrC,aAAa;QACb,kBAAkB;QAClB,cAAc;YACT;gBAAE,IAAI;gBAAS,UAAU;gBAAS,WAAW,CAAC,wCAAwC,CAAC;gBAAE,aAAa;gBAAO,IAAI;gBAAG,UAAU;YAAS;YACvI;gBAAE,IAAI;gBAAgB,UAAU;gBAAa,WAAW,CAAC,wCAAwC,CAAC;gBAAE,aAAa;gBAAO,IAAI;gBAAG,UAAU;YAAS;SACtJ;QACD,OAAO;QAAgB,UAAU,CAAC,gCAAgC,CAAC;QAAE,aAAa;IACtF;IACA;QACI,IAAI;QAAU,MAAM;QAAU,MAAM;QACpC,aAAa;QACb,kBAAkB;QAClB,cAAc;YACV;gBAAE,IAAI;gBAAS,UAAU;gBAAS,WAAW,CAAC,wCAAwC,CAAC;gBAAE,aAAa;gBAAM,IAAI;gBAAG,UAAU;YAAS;YACtI;gBAAE,IAAI;gBAAQ,UAAU;gBAAQ,WAAW,CAAC,wCAAwC,CAAC;gBAAE,aAAa;gBAAO,IAAI;gBAAG,UAAU;YAAS;SACxI;QACD,OAAO;QAAe,UAAU,CAAC,gCAAgC,CAAC;QAAE,aAAa;IACrF;IACA;QACI,IAAI;QAAU,MAAM;QAAS,MAAM;QACnC,aAAa;QACb,cAAc;YAAE;gBAAE,IAAI;gBAAgB,UAAU;gBAAa,WAAW,CAAC,wCAAwC,CAAC;gBAAE,aAAa;gBAAM,IAAI;gBAAG,UAAU;YAAS;SAAG;QACpK,OAAO;QAAY,UAAU,CAAC,gCAAgC,CAAC;QAAE,aAAa;IAClF;IACC;QACG,IAAI;QAAU,MAAM;QAAW,MAAM;QACrC,aAAa;QAAsB,kBAAkB;QAAI,cAAc,EAAE;QACzE,OAAO;QAAe,UAAU,CAAC,gCAAgC,CAAC;QAAE,aAAa;IACrF;IACA;QACI,IAAI;QAA6B,MAAM;QAAQ,MAAM;QACrD,aAAa;QACb,kBAAkB;QAAI,OAAO;QAAS,UAAU;QAChD,cAAc;YAAC;gBAAC,IAAI;gBAAgB,UAAU;gBAAa,WAAW;gBAA4C,aAAa;gBAAO,IAAI;gBAAG,UAAU;YAAQ;SAAE;QACjK,aAAa;IACjB;CACH;AAEM,MAAM,uBAAuC;IAClD;QAAE,IAAI;QAAa,OAAO;QAAkB,SAAS;QAA+B,MAAM,IAAI,OAAO,WAAW;IAAG;IACnH;QAAE,IAAI;QAAa,OAAO;QAAa,SAAS;QAAqB,MAAM,IAAI,KAAK,KAAK,GAAG,KAAK,UAAU,WAAW;IAAG;CAC1H","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["\nimport Database from 'better-sqlite3';\nimport path from 'path';\nimport fs from 'fs';\nimport type { Event, User, Participant, Announcement } from './types'; // Ensure correct path\nimport { defaultUsers, defaultEvents, defaultAnnouncements } from './default-data'; // We'll move defaults here\n\nconst DATA_DIR = path.join(process.cwd(), 'data');\nconst DB_PATH = path.join(DATA_DIR, 'minevent.sqlite');\n\n// Ensure data directory exists\nif (!fs.existsSync(DATA_DIR)) {\n  fs.mkdirSync(DATA_DIR, { recursive: true });\n}\n\nexport const db = new Database(DB_PATH);\ndb.pragma('journal_mode = WAL'); // Recommended for better performance and concurrency\ndb.pragma('foreign_keys = ON'); // Enforce foreign key constraints\n\nfunction initializeDatabase() {\n  console.log('Initializing database schema...');\n\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS users (\n      id TEXT PRIMARY KEY,\n      username TEXT NOT NULL UNIQUE,\n      avatarUrl TEXT,\n      op INTEGER DEFAULT 0,\n      password TEXT\n    );\n\n    CREATE TABLE IF NOT EXISTS events (\n      id TEXT PRIMARY KEY,\n      name TEXT NOT NULL,\n      date TEXT NOT NULL,\n      description TEXT NOT NULL,\n      participantLimit INTEGER,\n      cdKey TEXT NOT NULL UNIQUE,\n      imageUrl TEXT,\n      organizerId TEXT NOT NULL,\n      FOREIGN KEY (organizerId) REFERENCES users(id) ON DELETE CASCADE\n    );\n\n    CREATE TABLE IF NOT EXISTS announcements (\n      id TEXT PRIMARY KEY,\n      title TEXT NOT NULL,\n      content TEXT NOT NULL,\n      date TEXT NOT NULL\n    );\n\n    CREATE TABLE IF NOT EXISTS event_participants (\n      eventId TEXT NOT NULL,\n      userId TEXT NOT NULL,\n      isCheckedIn INTEGER DEFAULT 0,\n      PRIMARY KEY (eventId, userId),\n      FOREIGN KEY (eventId) REFERENCES events(id) ON DELETE CASCADE,\n      FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE\n    );\n  `);\n\n  console.log('Schema initialized.');\n\n  // Seed data if tables are empty\n  const userCount = db.prepare('SELECT COUNT(*) as count FROM users').get() as { count: number };\n  if (userCount.count === 0) {\n    console.log('Seeding users table...');\n    const insertUser = db.prepare('INSERT INTO users (id, username, avatarUrl, op, password) VALUES (@id, @username, @avatarUrl, @op, @password)');\n    db.transaction(() => {\n      for (const user of defaultUsers) {\n        insertUser.run({\n          id: user.id,\n          username: user.username,\n          avatarUrl: user.avatarUrl || `https://placehold.co/100x100.png?text=${user.username.substring(0,2)}`,\n          op: user.op || 0,\n          password: user.password || '123456' // Default password if not provided\n        });\n      }\n    })();\n    console.log('Users table seeded.');\n  }\n\n  const eventCount = db.prepare('SELECT COUNT(*) as count FROM events').get() as { count: number };\n  if (eventCount.count === 0) {\n    console.log('Seeding events and event_participants tables...');\n    const insertEvent = db.prepare('INSERT INTO events (id, name, date, description, participantLimit, cdKey, imageUrl, organizerId) VALUES (@id, @name, @date, @description, @participantLimit, @cdKey, @imageUrl, @organizerId)');\n    const insertParticipant = db.prepare('INSERT INTO event_participants (eventId, userId, isCheckedIn) VALUES (@eventId, @userId, @isCheckedIn)');\n    \n    db.transaction(() => {\n      for (const event of defaultEvents) {\n        insertEvent.run({\n          id: event.id,\n          name: event.name,\n          date: event.date,\n          description: event.description,\n          participantLimit: event.participantLimit,\n          cdKey: event.cdKey,\n          imageUrl: event.imageUrl,\n          organizerId: event.organizerId\n        });\n        for (const p of event.participants) {\n          // Ensure participant user exists in users table before inserting (or handle as error)\n          const userExists = db.prepare('SELECT id FROM users WHERE id = ?').get(p.id);\n          if (userExists) {\n            insertParticipant.run({\n              eventId: event.id,\n              userId: p.id,\n              isCheckedIn: p.isCheckedIn ? 1 : 0\n            });\n          } else {\n            console.warn(`Skipping participant ${p.id} for event ${event.id} as user does not exist.`);\n          }\n        }\n      }\n    })();\n    console.log('Events and event_participants tables seeded.');\n  }\n  \n  const announcementCount = db.prepare('SELECT COUNT(*) as count FROM announcements').get() as { count: number };\n  if (announcementCount.count === 0) {\n    console.log('Seeding announcements table...');\n    const insertAnnouncement = db.prepare('INSERT INTO announcements (id, title, content, date) VALUES (@id, @title, @content, @date)');\n    db.transaction(() => {\n      for (const announcement of defaultAnnouncements) {\n        insertAnnouncement.run(announcement);\n      }\n    })();\n    console.log('Announcements table seeded.');\n  }\n}\n\n// Call initialization\ntry {\n  initializeDatabase();\n} catch (err) {\n  console.error(\"CRITICAL: Database initialization failed:\", err);\n  // Depending on the error, you might want to exit or have a fallback\n}\n\nexport default db;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.ts"],"sourcesContent":["\nimport db from './db'; // Import the initialized DB instance\nimport type { Event, User, Participant, Announcement } from './types';\nimport { parseISO } from 'date-fns';\n\n// --- User Functions ---\nexport async function getUsers(): Promise<User[]> {\n  const stmt = db.prepare('SELECT id, username, avatarUrl, op, password FROM users');\n  return stmt.all() as User[];\n}\n\nexport async function getUserById(userId: string): Promise<User | undefined> {\n  const stmt = db.prepare('SELECT id, username, avatarUrl, op, password FROM users WHERE id = ?');\n  return stmt.get(userId) as User | undefined;\n}\n\nexport async function getUserByUsername(username: string): Promise<User | undefined> {\n  const stmt = db.prepare('SELECT id, username, avatarUrl, op, password FROM users WHERE lower(username) = lower(?)');\n  return stmt.get(username) as User | undefined;\n}\n\nexport async function createUser(userData: Omit<User, 'op' | 'avatarUrl'> & Partial<Pick<User, 'op' | 'avatarUrl' | 'password'>>): Promise<User> {\n  const existingUser = await getUserByUsername(userData.username);\n  if (existingUser) {\n    console.warn(`尝试创建已存在的用户: ${userData.username} (ID: ${userData.id})。返回现有用户。`);\n    return existingUser;\n  }\n\n  const newUser: User = {\n    id: userData.id || userData.username,\n    username: userData.username,\n    avatarUrl: userData.avatarUrl || `https://placehold.co/100x100.png?text=${userData.username.substring(0, 2).toUpperCase()}`,\n    op: userData.op || 0,\n    password: userData.password,\n  };\n\n  const stmt = db.prepare('INSERT INTO users (id, username, avatarUrl, op, password) VALUES (@id, @username, @avatarUrl, @op, @password)');\n  try {\n    stmt.run(newUser);\n    return newUser;\n  } catch (error) {\n    console.error(`创建用户 ${userData.username} 失败:`, error);\n    throw new Error(`创建用户 ${userData.username} 失败: ${(error as Error).message}`);\n  }\n}\n\nexport async function updateUserById(userId: string, userData: Partial<Pick<User, 'username' | 'avatarUrl' | 'op' | 'password'>>): Promise<User | null> {\n  const currentUser = await getUserById(userId);\n  if (!currentUser) return null;\n\n  const fieldsToUpdate: Record<string, any> = {};\n  if (userData.username !== undefined) fieldsToUpdate.username = userData.username;\n  if (userData.avatarUrl !== undefined) fieldsToUpdate.avatarUrl = userData.avatarUrl;\n  if (userData.op !== undefined) fieldsToUpdate.op = userData.op;\n  if (userData.password !== undefined && userData.password !== '') fieldsToUpdate.password = userData.password; // Update password only if provided and not empty\n\n  if (Object.keys(fieldsToUpdate).length === 0) {\n    return currentUser; // No actual changes to make\n  }\n\n  const setClauses = Object.keys(fieldsToUpdate).map(key => `${key} = @${key}`).join(', ');\n  const stmt = db.prepare(`UPDATE users SET ${setClauses} WHERE id = @id`);\n  \n  const result = stmt.run({ ...fieldsToUpdate, id: userId });\n  if (result.changes === 0) return null; // Should not happen if user exists and there are fields to update\n\n  return getUserById(userId); // Fetch and return updated user\n}\n\nexport async function deleteUserById(userId: string): Promise<{ success: boolean, message: string }> {\n  // Check if the user is an organizer of any event\n  const eventOrganizerCheckStmt = db.prepare('SELECT COUNT(*) as count FROM events WHERE organizerId = ?');\n  const organizerCount = eventOrganizerCheckStmt.get(userId) as { count: number };\n\n  if (organizerCount.count > 0) {\n    return { success: false, message: `无法删除用户 ${userId}，因为他们是 ${organizerCount.count} 个活动的组织者。请先转移或删除这些活动。` };\n  }\n\n  const deleteUserStmt = db.prepare('DELETE FROM users WHERE id = ?');\n  const result = deleteUserStmt.run(userId);\n  // CASCADE delete on event_participants table will handle removing their participation records.\n\n  if (result.changes > 0) {\n    return { success: true, message: `用户 ${userId} 已成功删除。` };\n  }\n  return { success: false, message: `用户 ${userId} 未找到，无法删除。` };\n}\n\n\n// --- Event Functions ---\nasync function getEventParticipants(eventId: string): Promise<Participant[]> {\n  const stmt = db.prepare(`\n    SELECT u.id, u.username, u.avatarUrl, u.op, ep.isCheckedIn\n    FROM users u\n    JOIN event_participants ep ON u.id = ep.userId\n    WHERE ep.eventId = ?\n  `);\n  // Note: We don't select u.password here for participants list\n  const participantsData = stmt.all(eventId) as Array<Omit<Participant, 'joinedEventIds' | 'password'>>;\n  return participantsData.map(p => ({...p, isCheckedIn: !!p.isCheckedIn}));\n}\n\nexport async function getEvents(): Promise<Event[]> {\n  const eventsStmt = db.prepare('SELECT * FROM events');\n  const rawEvents = eventsStmt.all() as Array<Omit<Event, 'participants'>>;\n  \n  const events: Event[] = [];\n  for (const rawEvent of rawEvents) {\n    const participants = await getEventParticipants(rawEvent.id);\n    events.push({ ...rawEvent, participants });\n  }\n  return events;\n}\n\nexport async function getEventById(id: string): Promise<Event | undefined> {\n  const eventStmt = db.prepare('SELECT * FROM events WHERE id = ?');\n  const rawEvent = eventStmt.get(id) as Omit<Event, 'participants'> | undefined;\n\n  if (!rawEvent) return undefined;\n\n  const participants = await getEventParticipants(rawEvent.id);\n  return { ...rawEvent, participants };\n}\n\nexport async function getEventsForUser(userId: string): Promise<Event[]> {\n  const stmt = db.prepare(`\n    SELECT e.*\n    FROM events e\n    JOIN event_participants ep ON e.id = ep.eventId\n    WHERE ep.userId = ?\n  `);\n  const rawEvents = stmt.all(userId) as Array<Omit<Event, 'participants'>>;\n  \n  const joinedEvents: Event[] = [];\n  for (const rawEvent of rawEvents) {\n    // For each event the user joined, we still need to fetch its full participant list\n    // to display on event cards or detail pages.\n    const participants = await getEventParticipants(rawEvent.id);\n    joinedEvents.push({ ...rawEvent, participants });\n  }\n  return joinedEvents;\n}\n\n\nexport async function getEventByCdKey(cdKey: string): Promise<Event | undefined> {\n  const eventStmt = db.prepare('SELECT * FROM events WHERE lower(cdKey) = lower(?)');\n  const rawEvent = eventStmt.get(cdKey) as Omit<Event, 'participants'> | undefined;\n\n  if (!rawEvent) return undefined;\n\n  const participants = await getEventParticipants(rawEvent.id);\n  return { ...rawEvent, participants };\n}\n\nexport async function createEvent(eventData: Omit<Event, 'id' | 'participants' | 'organizerId'>, organizerId: string): Promise<Event> {\n  const newEventId = `event_${Date.now()}_${Math.random().toString(36).substring(2, 7)}`;\n  const participantLimit = typeof eventData.participantLimit === 'number' && !isNaN(eventData.participantLimit) ? eventData.participantLimit : null;\n\n  const newEventRow = {\n    id: newEventId,\n    name: eventData.name,\n    date: eventData.date,\n    description: eventData.description,\n    participantLimit: participantLimit,\n    cdKey: eventData.cdKey,\n    imageUrl: eventData.imageUrl || '',\n    organizerId,\n  };\n  const stmt = db.prepare('INSERT INTO events (id, name, date, description, participantLimit, cdKey, imageUrl, organizerId) VALUES (@id, @name, @date, @description, @participantLimit, @cdKey, @imageUrl, @organizerId)');\n  stmt.run(newEventRow);\n  return { ...newEventRow, participants: [] }; // Return with empty participants as they are managed separately\n}\n\nexport async function updateEventById(eventId: string, eventData: Partial<Omit<Event, 'id' | 'participants' | 'organizerId'>>): Promise<Event | null> {\n  const { name, date, description, participantLimit, cdKey, imageUrl } = eventData;\n  const actualParticipantLimit = typeof participantLimit === 'number' && !isNaN(participantLimit) ? participantLimit : (participantLimit === null ? null : undefined);\n\n\n  const fieldsToUpdate: Record<string, any> = {};\n  if (name !== undefined) fieldsToUpdate.name = name;\n  if (date !== undefined) fieldsToUpdate.date = date;\n  if (description !== undefined) fieldsToUpdate.description = description;\n  if (actualParticipantLimit !== undefined) fieldsToUpdate.participantLimit = actualParticipantLimit; // Can be null\n  if (cdKey !== undefined) fieldsToUpdate.cdKey = cdKey;\n  if (imageUrl !== undefined) fieldsToUpdate.imageUrl = imageUrl;\n\n  if (Object.keys(fieldsToUpdate).length === 0) {\n    return getEventById(eventId) || null; // No actual changes\n  }\n\n  const setClauses = Object.keys(fieldsToUpdate).map(key => `${key} = @${key}`).join(', ');\n  const stmt = db.prepare(`UPDATE events SET ${setClauses} WHERE id = @eventId`);\n  \n  const result = stmt.run({ ...fieldsToUpdate, eventId });\n  \n  if (result.changes === 0) return null;\n  return getEventById(eventId) || null;\n}\n\nexport async function deleteEventByIdAction(eventId: string): Promise<{ success: boolean, message: string }> {\n  const stmt = db.prepare('DELETE FROM events WHERE id = ?');\n  const result = stmt.run(eventId);\n\n  if (result.changes > 0) {\n    return { success: true, message: \"活动已成功删除。\" };\n  }\n  return { success: false, message: \"活动未找到，无法删除。\" };\n}\n\nexport async function joinEvent(userId: string, eventId: string, cdKeyInput: string): Promise<{ success: boolean, message: string, event?: Event }> {\n  const event = await getEventById(eventId);\n  if (!event) return { success: false, message: '活动未找到。' };\n\n  const user = await getUserById(userId);\n  if (!user) return { success: false, message: '用户未找到。' };\n\n  if (event.cdKey.toLowerCase() !== cdKeyInput.toLowerCase()) return { success: false, message: '无效的活动代码。' };\n  \n  const currentParticipants = await getEventParticipants(eventId);\n  if (event.participantLimit && currentParticipants.length >= event.participantLimit) {\n    return { success: false, message: '活动人数已满。' };\n  }\n  if (currentParticipants.some(p => p.id === userId)) {\n    return { success: true, message: '您已加入此活动。', event };\n  }\n\n  const stmt = db.prepare('INSERT INTO event_participants (eventId, userId, isCheckedIn) VALUES (?, ?, 0)');\n  stmt.run(eventId, userId);\n  \n  const finalEvent = await getEventById(eventId);\n  return { success: true, message: '成功加入活动！', event: finalEvent };\n}\n\nexport async function leaveEvent(userId: string, eventId: string): Promise<{ success: boolean, message: string, event?: Event }> {\n  const event = await getEventById(eventId);\n  if (!event) return { success: false, message: '活动未找到。' };\n\n  const stmt = db.prepare('DELETE FROM event_participants WHERE eventId = ? AND userId = ?');\n  const result = stmt.run(eventId, userId);\n\n  if (result.changes > 0) {\n    const updatedEvent = await getEventById(eventId);\n    return { success: true, message: '成功离开活动。', event: updatedEvent };\n  }\n  return { success: false, message: '您当前未加入此活动，或离开失败。' };\n}\n\nexport async function checkInUser(userId: string, eventId: string): Promise<{ success: boolean, message: string }> {\n  const event = await getEventById(eventId);\n  if (!event) return { success: false, message: '活动未找到。' };\n\n  const participants = await getEventParticipants(eventId);\n  const participant = participants.find(p => p.id === userId);\n\n  if (!participant) return { success: false, message: '您未报名参加此活动。' };\n  if (participant.isCheckedIn) return { success: true, message: '您已签到。' };\n\n  const eventDateObj = parseISO(event.date);\n  const today = new Date();\n  const isCurrent = eventDateObj.getFullYear() === today.getFullYear() &&\n                    eventDateObj.getMonth() === today.getMonth() &&\n                    eventDateObj.getDate() === today.getDate();\n\n  if (!isCurrent) {\n    return { success: false, message: '此活动的签到尚未开始或已结束。' };\n  }\n\n  const stmt = db.prepare('UPDATE event_participants SET isCheckedIn = 1 WHERE eventId = ? AND userId = ?');\n  stmt.run(eventId, userId);\n  return { success: true, message: '签到成功！' };\n}\n\n// --- Announcement Functions ---\nexport async function getAnnouncements(): Promise<Announcement[]> {\n  const stmt = db.prepare('SELECT * FROM announcements ORDER BY date DESC');\n  return stmt.all() as Announcement[];\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 654, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/namemc.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Mocks a check to NameMC to see if a username is valid.\n */\n\n/**\n * Mocks a check to NameMC to see if a username is valid.\n * In a real application, this would involve an API call to NameMC.\n * @param username The Minecraft username to check.\n * @returns Promise<boolean> True if the username is considered valid, false otherwise.\n */\nexport async function checkNameMC(username: string): Promise<boolean> {\n  console.log(`Pretending to check NameMC for username: ${username}`);\n  // In a real scenario:\n  // try {\n  //   // Example: const response = await fetch(`https://api.namemc.com/profile/${username}/uuid`);\n  //   // return response.ok;\n  // } catch (error) {\n  //   console.error(\"NameMC check failed:\", error);\n  //   return false;\n  // }\n\n  // For testing the \"invalid\" path in the login flow\n  if (username.toLowerCase() === \"invalid_player_for_testing\") {\n    console.log(`Mock: Username \"${username}\" is considered invalid by NameMC.`);\n    return false;\n  }\n\n  // Mock: assume most usernames are valid for now\n  console.log(`Mock: Username \"${username}\" is considered valid by NameMC.`);\n  return true;\n}\n"],"names":[],"mappings":";;;;;;;;AAaO,eAAe,uCAAS,GAAT,YAAY,QAAgB;IAChD,QAAQ,GAAG,CAAC,CAAC,yCAAyC,EAAE,UAAU;IAClE,sBAAsB;IACtB,QAAQ;IACR,iGAAiG;IACjG,2BAA2B;IAC3B,oBAAoB;IACpB,kDAAkD;IAClD,kBAAkB;IAClB,IAAI;IAEJ,mDAAmD;IACnD,IAAI,SAAS,WAAW,OAAO,8BAA8B;QAC3D,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,SAAS,kCAAkC,CAAC;QAC3E,OAAO;IACT;IAEA,gDAAgD;IAChD,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,SAAS,gCAAgC,CAAC;IACzE,OAAO;AACT;;;IApBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 700, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { z } from 'zod';\nimport {\n  createEvent as apiCreateEvent,\n  joinEvent as apiJoinEvent,\n  leaveEvent as apiLeaveEvent,\n  checkInUser as apiCheckInUser,\n  getUserById,\n  getUserByUsername,\n  getEventById,\n  getEvents as apiGetEvents,\n  createUser as apiCreateUser,\n  getEventByCdKey,\n  getAnnouncements as apiGetAnnouncements,\n  deleteEventByIdAction as apiDeleteEventById, // Renamed to avoid conflict with action name\n  updateEventById as apiUpdateEventById,\n  getEventsForUser,\n  getUsers as apiGetUsers, // For admin user management\n  updateUserById as apiUpdateUserById, // For admin user management\n  deleteUserById as apiDeleteUserById, // For admin user management\n} from './data';\nimport type { Event, User, Announcement } from './types';\nimport { checkNameMC } from './namemc';\nimport crypto from 'crypto';\n\nconst MAX_AGE = 60 * 60 * 24 * 30; // 30 days\n\n// --- Geetest Verification ---\nasync function verifyGeetestV4(\n  lot_number?: string, \n  captcha_output?: string, \n  pass_token?: string, \n  gen_time?: string\n): Promise<boolean> {\n  if (!process.env.NEXT_PUBLIC_GEETEST_CAPTCHA_ID || !process.env.GEETEST_SECRET_KEY) {\n    console.warn(\"Geetest CAPTCHA_ID or SECRET_KEY not configured. Skipping validation in dev/test mode.\");\n    return process.env.NODE_ENV !== 'production'; // Allow in dev if not configured\n  }\n  if (!lot_number || !captcha_output || !pass_token || !gen_time) {\n    console.warn(\"Geetest client parameters missing for server validation.\");\n    return false;\n  }\n\n  const params = new URLSearchParams();\n  params.append('lot_number', lot_number);\n  params.append('captcha_output', captcha_output);\n  params.append('pass_token', pass_token);\n  params.append('gen_time', gen_time);\n  params.append('captcha_id', process.env.NEXT_PUBLIC_GEETEST_CAPTCHA_ID);\n  \n  const sign_token = crypto.createHmac('sha256', process.env.GEETEST_SECRET_KEY)\n    .update(lot_number)\n    .digest('hex');\n  params.append('sign_token', sign_token);\n\n  try {\n    const response = await fetch('https://gcaptcha4.geetest.com/validate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: params.toString(),\n    });\n    if (!response.ok) {\n      console.error(`Geetest API request failed with status: ${response.status}`);\n      return false;\n    }\n    const data = await response.json();\n    console.log(\"Geetest validation response:\", data); // Log for debugging\n    return data?.status === 'success' && data?.result === 'success';\n  } catch (error) {\n    console.error('Geetest validation API request failed:', error);\n    return false;\n  }\n}\n\n// --- Authentication ---\nconst MinecraftUsernameSchema = z.string()\n  .min(3, \"Minecraft 用户名长度必须在 3 到 16 个字符之间。\")\n  .max(16, \"Minecraft 用户名长度必须在 3 到 16 个字符之间。\")\n  .regex(/^[a-zA-Z0-9_]+$/, \"Minecraft 用户名只能包含字母、数字和下划线。\")\n  .refine(username => !username.startsWith('_') && !username.endsWith('_'), {\n    message: \"Minecraft 用户名不能以下划线开头或结尾。\",\n  });\n\nconst AuthFormSchema = z.object({\n  minecraftUsername: MinecraftUsernameSchema,\n  password: z.string().min(6, \"密码至少需要6个字符。\"),\n  confirmPassword: z.string().optional(),\n  authMode: z.enum(['login', 'register']),\n  lot_number: z.string().optional(),\n  captcha_output: z.string().optional(),\n  pass_token: z.string().optional(),\n  gen_time: z.string().optional(),\n});\n\nexport type AuthFormState = {\n  message?: string | null;\n  errors?: {\n    minecraftUsername?: string[];\n    password?: string[];\n    confirmPassword?: string[];\n    authMode?: string[];\n    form?: string[];\n    captcha?: string[];\n  };\n  success: boolean;\n  userId?: string;\n};\n\nexport async function authenticateUserAction(prevState: AuthFormState, formData: FormData): Promise<AuthFormState> {\n  try {\n    const rawFormData = Object.fromEntries(formData.entries());\n    const validatedFields = AuthFormSchema.safeParse(rawFormData);\n\n    if (!validatedFields.success) {\n      return {\n        message: '输入无效。请检查您填写的信息。',\n        errors: validatedFields.error.flatten().fieldErrors,\n        success: false,\n      };\n    }\n    \n    const { minecraftUsername, password, authMode, lot_number, captcha_output, pass_token, gen_time } = validatedFields.data;\n\n    const isCaptchaValid = await verifyGeetestV4(lot_number, captcha_output, pass_token, gen_time);\n    if (!isCaptchaValid) {\n      return {\n        message: '人机验证失败，请重试。',\n        errors: { captcha: ['人机验证失败或已过期，请刷新验证码后重试。'] },\n        success: false,\n      };\n    }\n\n    if (authMode === 'login') {\n      const user = await getUserByUsername(minecraftUsername);\n      if (!user) {\n        return { message: '用户不存在。请检查您的用户名或进行注册。', errors: { minecraftUsername: ['该用户不存在。'] }, success: false };\n      }\n      if (!user.password || user.password !== password) { // Plaintext comparison for prototype\n        return { message: '密码不正确。', errors: { password: ['密码不正确。'] }, success: false };\n      }\n      cookies().set('userId', user.id, { httpOnly: true, secure: process.env.NODE_ENV === 'production', maxAge: MAX_AGE, path: '/', sameSite: 'lax' });\n      \n    } else if (authMode === 'register') {\n      if (validatedFields.data.password !== validatedFields.data.confirmPassword) {\n        return { message: \"两次输入的密码不匹配。\", errors: { confirmPassword: [\"两次输入的密码不匹配。\"] }, success: false };\n      }\n\n      const isNameMCValid = await checkNameMC(minecraftUsername);\n      if (!isNameMCValid) {\n        return { message: '此 Minecraft 用户名在 NameMC 上无效或无法验证。', errors: { minecraftUsername: ['此 Minecraft 用户名在 NameMC 上无效或无法验证。'] }, success: false };\n      }\n\n      const existingUser = await getUserByUsername(minecraftUsername);\n      if (existingUser) {\n        return { message: '此 Minecraft 用户名已被注册。', errors: { minecraftUsername: ['此 Minecraft 用户名已被注册。'] }, success: false };\n      }\n      \n      let newUser: User | null = null;\n      try {\n        newUser = await apiCreateUser({ \n          id: minecraftUsername, // Use username as ID for simplicity in prototype\n          username: minecraftUsername,\n          password: password, // Store plaintext for prototype\n          op: 0, \n          avatarUrl: `https://placehold.co/100x100.png?text=${minecraftUsername.substring(0,2).toUpperCase()}`\n        });\n      } catch (error: any) {\n        console.error(\"authenticateUserAction - Registration - apiCreateUser failed:\", error);\n        return { message: `创建用户时出错: ${error.message || '未知错误'}`, errors: { form: [`创建用户时出错: ${error.message || '未知错误'}`] }, success: false };\n      }\n\n      if (!newUser || !newUser.id) {\n         return { message: '创建用户后未能获取用户信息。', errors: { form: ['创建用户后未能获取用户信息。'] }, success: false };\n      }\n      cookies().set('userId', newUser.id, { httpOnly: true, secure: process.env.NODE_ENV === 'production', maxAge: MAX_AGE, path: '/', sameSite: 'lax' });\n    } else {\n      return { message: \"无效的操作模式。\", success: false, errors: {authMode: [\"无效的操作模式。\"]} };\n    }\n\n  } catch (error: any) {\n    if (error && typeof error === 'object' && 'digest' in error && typeof error.digest === 'string' && error.digest.startsWith('NEXT_REDIRECT')) {\n      throw error;\n    }\n    console.error(\"Authenticate User Action - Server Error:\", error);\n    return { message: '认证过程中发生服务器内部错误，请稍后再试。', success: false, errors: { form: ['认证过程中发生服务器内部错误，请稍后再试。']} };\n  }\n  redirect('/dashboard');\n}\n\n\nexport async function logout() {\n  cookies().delete('userId');\n  redirect('/login');\n}\n\nexport async function getSessionUser(): Promise<User | null> {\n  const userId = cookies().get('userId')?.value;\n  if (!userId) return null;\n  try {\n    const user = await getUserById(userId); \n    return user || null;\n  } catch (error) {\n    console.error(\"获取会话用户失败:\", error);\n    return null;\n  }\n}\n\n// --- Event Actions ---\nconst CreateEventSchema = z.object({\n  name: z.string().min(3, \"活动名称至少需要3个字符。\"),\n  date: z.string().refine((date) => !isNaN(Date.parse(date)), \"无效的日期格式。\"),\n  description: z.string().min(10, \"描述至少需要10个字符。\"),\n  participantLimit: z.preprocess(\n    (val) => (val === \"\" || val === null || val === undefined ? undefined : Number(val)),\n    z.number().int().positive().optional().nullable()\n  ),\n  cdKey: z.string().min(4, \"活动代码至少需要4个字符。\").max(20, \"活动代码最多20个字符。\"),\n  imageUrl: z.string().url(\"无效的图片链接。\").optional().or(z.literal('')),\n  userPassword: z.string().min(1, \"您的账户密码不能为空。\")\n});\n\nexport async function createEventAction(prevState: any, formData: FormData) {\n  try {\n    const rawFormData = Object.fromEntries(formData.entries());\n    const validatedFields = CreateEventSchema.safeParse(rawFormData);\n\n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: '创建活动失败。请检查所填字段。',\n        success: false,\n      };\n    }\n\n    const user = await getSessionUser();\n    if (!user) {\n      return { message: '需要认证才能创建活动。请先登录。', errors: { form: ['请先登录。'] }, success: false };\n    }\n    if (user.op !== 1) {\n      return { message: '您没有创建活动的权限。', errors: { form: ['权限不足。'] }, success: false };\n    }\n\n    if (!user.password || user.password !== validatedFields.data.userPassword) {\n      return {\n        errors: { ...(validatedFields.error?.flatten().fieldErrors || {}), userPassword: ['您的账户密码不正确。'] },\n        message: '创建活动失败。账户密码验证失败。',\n        success: false,\n      };\n    }\n\n    let newEventId: string | undefined;\n    const { userPassword, ...eventDataForApi } = validatedFields.data;\n    const newEvent = await apiCreateEvent( \n        eventDataForApi as Omit<Event, 'id' | 'participants' | 'organizerId'>,\n        user.id\n    );\n    newEventId = newEvent.id;\n    \n    if (newEventId) {\n      redirect(`/events/${newEventId}`);\n    } else {\n      return { message: '创建活动后未能获取活动ID。', errors: { form: ['创建活动后未能获取活动ID。'] }, success: false };\n    }\n  } catch (error: any) {\n    if (error && typeof error === 'object' && 'digest' in error && error.digest?.startsWith('NEXT_REDIRECT')) {\n      throw error;\n    }\n    console.error(\"Create Event Action - Server Error:\", error);\n    return { message: '创建活动时发生意外的服务器错误。', errors: { form: ['创建活动时发生意外的服务器错误。'] }, success: false };\n  }\n}\n\nconst UpdateEventSchema = CreateEventSchema.extend({ // Reuses fields from CreateEventSchema\n  eventId: z.string().min(1, \"Event ID is required.\"),\n});\n\nexport async function updateEventAction(prevState: any, formData: FormData) {\n  try {\n    const rawFormData = Object.fromEntries(formData.entries());\n    const validatedFields = UpdateEventSchema.safeParse(rawFormData);\n\n    if (!validatedFields.success) {\n      return {\n        errors: validatedFields.error.flatten().fieldErrors,\n        message: '更新活动失败。请检查所填字段。',\n        success: false,\n      };\n    }\n\n    const user = await getSessionUser();\n    if (!user) {\n      return { message: '需要认证才能更新活动。请先登录。', errors: { form: ['请先登录。'] }, success: false };\n    }\n    if (user.op !== 1) {\n      return { message: '您没有更新活动的权限。', errors: { form: ['权限不足。'] }, success: false };\n    }\n    if (!user.password || user.password !== validatedFields.data.userPassword) {\n      return {\n        errors: { ...(validatedFields.error?.flatten().fieldErrors || {}), userPassword: ['您的账户密码不正确。'] },\n        message: '更新活动失败。账户密码验证失败。',\n        success: false,\n      };\n    }\n\n    const { userPassword, eventId, ...eventDataToUpdate } = validatedFields.data;\n    const updatedEvent = await apiUpdateEventById(eventId, eventDataToUpdate as Partial<Omit<Event, 'id' | 'participants' | 'organizerId'>>);\n    \n    if (!updatedEvent) {\n      return { message: '更新活动失败，活动未找到或没有更改。', errors: { eventId: ['活动未找到或没有进行任何更改。'] }, success: false };\n    }\n    redirect(`/events/${validatedFields.data.eventId}`);\n\n  } catch (error: any) {\n     if (error && typeof error === 'object' && 'digest' in error && error.digest?.startsWith('NEXT_REDIRECT')) {\n      throw error;\n    }\n    console.error(\"Update Event Action - Server Error:\", error);\n    return { message: '更新活动时发生意外的服务器错误。', errors: { form: ['更新活动时发生意外的服务器错误。'] }, success: false };\n  }\n}\n\n\nexport async function deleteEventAction(eventId: string, adminPassword: string): Promise<{ success: boolean, message: string }> {\n  const user = await getSessionUser();\n  if (!user) {\n    return { success: false, message: '需要认证才能删除活动。请先登录。' };\n  }\n  if (user.op !== 1) {\n    return { success: false, message: '您没有删除活动的权限。' };\n  }\n  if (!user.password || user.password !== adminPassword) {\n    return { success: false, message: '您的账户密码不正确，无法删除活动。' };\n  }\n\n  try {\n    const result = await apiDeleteEventById(eventId); \n    return result;\n  } catch (error) {\n    console.error(\"删除活动错误:\", error);\n    return { success: false, message: '在服务器上删除活动失败。请稍后重试。' };\n  }\n}\n\n\nexport async function joinEventAction(eventId: string, cdKeyInput: string) {\n  const user = await getSessionUser();\n  if (!user) {\n    return { success: false, message: '您必须登录才能加入活动。' };\n  }\n  try {\n    const result = await apiJoinEvent(user.id, eventId, cdKeyInput); \n    return result;\n  } catch (error) {\n    console.error(\"加入活动错误:\", error);\n    return { success: false, message: '加入活动时发生服务器错误。' };\n  }\n}\n\nexport async function joinEventUsingCdKeyOnlyAction(cdKey: string): Promise<{ success: boolean, message: string, event?: Event }> {\n  const user = await getSessionUser();\n  if (!user) {\n    return { success: false, message: '您必须登录才能加入活动。' };\n  }\n\n  if (!cdKey || cdKey.trim() === '') {\n    return { success: false, message: '请输入有效的活动代码。' };\n  }\n\n  const eventToJoin = await getEventByCdKey(cdKey); \n  if (!eventToJoin) {\n    return { success: false, message: '具有此活动代码的活动未找到。' };\n  }\n\n  try {\n    const result = await apiJoinEvent(user.id, eventToJoin.id, cdKey); \n    return result;\n  } catch (error) {\n    console.error(\"使用活动代码加入活动错误:\", error);\n    return { success: false, message: '使用活动代码加入活动时发生服务器错误。' };\n  }\n}\n\n\nexport async function leaveEventAction(eventId: string) {\n  const user = await getSessionUser();\n  if (!user) {\n    return { success: false, message: '您必须登录才能离开活动。' };\n  }\n  try {\n    const result = await apiLeaveEvent(user.id, eventId); \n    return result;\n  } catch (error) {\n    console.error(\"离开活动错误:\", error);\n    return { success: false, message: '离开活动时发生服务器错误。' };\n  }\n}\n\nexport async function checkInAction(eventId: string) {\n  const user = await getSessionUser();\n  if (!user) {\n    return { success: false, message: '您必须登录才能签到。' };\n  }\n  try {\n    const result = await apiCheckInUser(user.id, eventId); \n    return result;\n  } catch (error) {\n    console.error(\"签到错误:\", error);\n    return { success: false, message: '签到过程中发生服务器错误。' };\n  }\n}\n\nexport async function getEventDetailsAction(eventId: string): Promise<Event | null> {\n  try {\n    const event = await getEventById(eventId); \n    return event || null;\n  } catch (error) {\n    console.error(\"获取活动详情错误 (action):\", error);\n    return null;\n  }\n}\n\nexport async function getEventsAction(): Promise<Event[]> {\n  try {\n    return await apiGetEvents(); \n  } catch (error) {\n    console.error(\"获取所有活动失败 (action):\", error);\n    return [];\n  }\n}\n\nexport async function getUserProfile(userId: string): Promise<{ user: User; joinedEvents: Event[] } | null> {\n  const user = await getUserById(userId);\n  if (!user) {\n    console.warn(`用户个人资料未找到: ${userId}`);\n    return null;\n  }\n  const joinedEvents = await getEventsForUser(userId);\n  return { user: {...user}, joinedEvents: joinedEvents.map(e => ({...e})) };\n}\n\nexport async function getAnnouncementsAction(): Promise<Announcement[]> {\n  try {\n    return await apiGetAnnouncements(); \n  } catch (error) {\n    console.error(\"获取公告失败 (action):\", error);\n    return [];\n  }\n}\n\n// --- User Management Actions (Admin Only) ---\nexport async function getUsersAction(): Promise<User[]> {\n  const currentUser = await getSessionUser();\n  if (!currentUser || currentUser.op !== 1) {\n    console.warn(\"非管理员尝试获取用户列表。\");\n    return []; // Or throw an error\n  }\n  return apiGetUsers();\n}\n\nconst AdminAddUserFormSchema = z.object({\n  minecraftUsername: MinecraftUsernameSchema,\n  avatarUrl: z.string().url(\"无效的头像链接。\").optional().or(z.literal('')),\n  op: z.enum(['0', '1']).transform(Number), // Transform string '0'/'1' to number 0/1\n  password: z.string().min(6, \"密码至少需要6个字符。\"),\n  confirmPassword: z.string(),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"两次输入的密码不匹配。\",\n  path: [\"confirmPassword\"],\n});\n\nexport type AdminAddUserFormState = {\n  message?: string | null;\n  errors?: {\n    minecraftUsername?: string[];\n    avatarUrl?: string[];\n    op?: string[];\n    password?: string[];\n    confirmPassword?: string[];\n    form?: string[];\n  };\n  success: boolean;\n};\n\nexport async function adminAddUserAction(prevState: AdminAddUserFormState, formData: FormData): Promise<AdminAddUserFormState> {\n  try {\n    const performingUser = await getSessionUser();\n    if (!performingUser || performingUser.op !== 1) {\n      return { message: \"您没有权限执行此操作。\", success: false };\n    }\n\n    const rawFormData = Object.fromEntries(formData.entries());\n    const validatedFields = AdminAddUserFormSchema.safeParse(rawFormData);\n\n    if (!validatedFields.success) {\n      return {\n        message: '输入无效。请检查您填写的信息。',\n        errors: validatedFields.error.flatten().fieldErrors,\n        success: false,\n      };\n    }\n\n    const { minecraftUsername, avatarUrl, op, password } = validatedFields.data;\n\n    const isNameMCValid = await checkNameMC(minecraftUsername);\n    if (!isNameMCValid) {\n      return { message: '此 Minecraft 用户名在 NameMC 上无效或无法验证。', errors: { minecraftUsername: ['此 Minecraft 用户名在 NameMC 上无效或无法验证。'] }, success: false };\n    }\n\n    const existingUser = await getUserByUsername(minecraftUsername);\n    if (existingUser) {\n      return { message: '此 Minecraft 用户名已被注册。', errors: { minecraftUsername: ['此 Minecraft 用户名已被注册。'] }, success: false };\n    }\n\n    await apiCreateUser({\n      id: minecraftUsername,\n      username: minecraftUsername,\n      avatarUrl: avatarUrl || `https://placehold.co/100x100.png?text=${minecraftUsername.substring(0,2).toUpperCase()}`,\n      op: op,\n      password: password,\n    });\n\n    return { message: `用户 ${minecraftUsername} 已成功创建。`, success: true };\n\n  } catch (error: any) {\n    console.error(\"Admin Add User Action - Server Error:\", error);\n    return { message: '创建用户时发生服务器内部错误。', success: false, errors: { form: ['创建用户时发生服务器内部错误。'] } };\n  }\n}\n\n\nconst AdminUpdateUserFormSchema = z.object({\n  userIdToUpdate: z.string().min(1, \"用户ID是必需的。\"),\n  minecraftUsername: MinecraftUsernameSchema,\n  avatarUrl: z.string().url(\"无效的头像链接。\").optional().or(z.literal('')),\n  op: z.enum(['0', '1']).transform(Number),\n  newPassword: z.string().min(6, \"新密码至少需要6个字符。\").optional().or(z.literal('')),\n  confirmNewPassword: z.string().optional().or(z.literal('')),\n  adminConfirmPassword: z.string().min(1, \"需要您的密码来确认更改。\") \n}).refine(data => {\n  if (data.newPassword && data.newPassword !== data.confirmNewPassword) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"两次输入的新密码不匹配。\",\n  path: [\"confirmNewPassword\"],\n});\n\nexport type AdminUpdateUserFormState = AdminAddUserFormState & { // Can reuse for structure\n  errors?: AdminAddUserFormState['errors'] & {\n    userIdToUpdate?: string[];\n    newPassword?: string[];\n    adminConfirmPassword?: string[];\n  }\n};\n\n\nexport async function adminUpdateUserAction(prevState: AdminUpdateUserFormState, formData: FormData): Promise<AdminUpdateUserFormState> {\n   try {\n    const performingUser = await getSessionUser();\n    if (!performingUser || performingUser.op !== 1) {\n      return { message: \"您没有权限执行此操作。\", success: false };\n    }\n\n    const rawFormData = Object.fromEntries(formData.entries());\n    const validatedFields = AdminUpdateUserFormSchema.safeParse(rawFormData);\n\n    if (!validatedFields.success) {\n      return {\n        message: '输入无效。请检查您填写的信息。',\n        errors: validatedFields.error.flatten().fieldErrors,\n        success: false,\n      };\n    }\n    \n    const { userIdToUpdate, minecraftUsername, avatarUrl, op, newPassword, adminConfirmPassword } = validatedFields.data;\n\n    if (performingUser.password !== adminConfirmPassword) {\n        return { message: '您的账户密码不正确，无法授权此更改。', errors: { adminConfirmPassword: ['管理员密码不正确。'] }, success: false };\n    }\n\n    const userToUpdate = await getUserById(userIdToUpdate);\n    if (!userToUpdate) {\n      return { message: '要更新的用户未找到。', errors: { userIdToUpdate: ['用户未找到。'] }, success: false };\n    }\n\n    // Check if username is being changed and if the new username is already taken (by someone else)\n    if (minecraftUsername.toLowerCase() !== userToUpdate.username.toLowerCase()) {\n      const existingUserWithNewName = await getUserByUsername(minecraftUsername);\n      if (existingUserWithNewName && existingUserWithNewName.id !== userIdToUpdate) {\n        return { message: '此 Minecraft 用户名已被其他用户注册。', errors: { minecraftUsername: ['此 Minecraft 用户名已被其他用户注册。'] }, success: false };\n      }\n      const isNameMCValid = await checkNameMC(minecraftUsername);\n      if (!isNameMCValid) {\n        return { message: '新的 Minecraft 用户名在 NameMC 上无效或无法验证。', errors: { minecraftUsername: ['新的 Minecraft 用户名在 NameMC 上无效或无法验证。'] }, success: false };\n      }\n    }\n    \n    const updateData: Partial<User> = {\n      username: minecraftUsername,\n      avatarUrl: avatarUrl || userToUpdate.avatarUrl, // Keep old if new is empty\n      op: op,\n    };\n\n    if (newPassword) { // Only update password if a new one is provided\n      updateData.password = newPassword;\n    }\n\n    await apiUpdateUserById(userIdToUpdate, updateData);\n\n    return { message: `用户 ${minecraftUsername} (ID: ${userIdToUpdate}) 已成功更新。`, success: true };\n\n  } catch (error: any) {\n    console.error(\"Admin Update User Action - Server Error:\", error);\n    return { message: '更新用户时发生服务器内部错误。', success: false, errors: { form: ['更新用户时发生服务器内部错误。'] } };\n  }\n}\n\nexport async function adminDeleteUserAction(userIdToDelete: string, adminConfirmPassword: string): Promise<{ success: boolean; message: string }> {\n  const performingUser = await getSessionUser();\n  if (!performingUser || performingUser.op !== 1) {\n    return { success: false, message: \"您没有权限执行此操作。\" };\n  }\n  if (performingUser.id === userIdToDelete) {\n    return { success: false, message: \"您不能删除自己的账户。\" };\n  }\n  if (performingUser.password !== adminConfirmPassword) {\n    return { success: false, message: \"您的账户密码不正确，无法授权删除操作。\" };\n  }\n\n  try {\n    const result = await apiDeleteUserById(userIdToDelete);\n    return result;\n  } catch (error) {\n    console.error(\"Admin Delete User Action - Server Error:\", error);\n    return { success: false, message: \"删除用户时发生服务器内部错误。\" };\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1579, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1687, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28auth%29/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","debugId":null}},
    {"offset": {"line": 1701, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28auth%29/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","debugId":null}},
    {"offset": {"line": 1715, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}